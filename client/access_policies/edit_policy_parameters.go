// Code generated by go-swagger; DO NOT EDIT.

package access_policies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewEditPolicyParams creates a new EditPolicyParams object
// with the default values initialized.
func NewEditPolicyParams() *EditPolicyParams {
	var ()
	return &EditPolicyParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewEditPolicyParamsWithTimeout creates a new EditPolicyParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewEditPolicyParamsWithTimeout(timeout time.Duration) *EditPolicyParams {
	var ()
	return &EditPolicyParams{

		timeout: timeout,
	}
}

// NewEditPolicyParamsWithContext creates a new EditPolicyParams object
// with the default values initialized, and the ability to set a context for a request
func NewEditPolicyParamsWithContext(ctx context.Context) *EditPolicyParams {
	var ()
	return &EditPolicyParams{

		Context: ctx,
	}
}

// NewEditPolicyParamsWithHTTPClient creates a new EditPolicyParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewEditPolicyParamsWithHTTPClient(client *http.Client) *EditPolicyParams {
	var ()
	return &EditPolicyParams{
		HTTPClient: client,
	}
}

/*EditPolicyParams contains all the parameters to send to the API endpoint
for the edit policy operation typically these are written to a http.Request
*/
type EditPolicyParams struct {

	/*ID
	  The ID of the policy to edit

	*/
	ID int64
	/*Policy
	  Policy information to modify

	*/
	Policy EditPolicyBody

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the edit policy params
func (o *EditPolicyParams) WithTimeout(timeout time.Duration) *EditPolicyParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the edit policy params
func (o *EditPolicyParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the edit policy params
func (o *EditPolicyParams) WithContext(ctx context.Context) *EditPolicyParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the edit policy params
func (o *EditPolicyParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the edit policy params
func (o *EditPolicyParams) WithHTTPClient(client *http.Client) *EditPolicyParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the edit policy params
func (o *EditPolicyParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the edit policy params
func (o *EditPolicyParams) WithID(id int64) *EditPolicyParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the edit policy params
func (o *EditPolicyParams) SetID(id int64) {
	o.ID = id
}

// WithPolicy adds the policy to the edit policy params
func (o *EditPolicyParams) WithPolicy(policy EditPolicyBody) *EditPolicyParams {
	o.SetPolicy(policy)
	return o
}

// SetPolicy adds the policy to the edit policy params
func (o *EditPolicyParams) SetPolicy(policy EditPolicyBody) {
	o.Policy = policy
}

// WriteToRequest writes these params to a swagger request
func (o *EditPolicyParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt64(o.ID)); err != nil {
		return err
	}

	if err := r.SetBodyParam(o.Policy); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
