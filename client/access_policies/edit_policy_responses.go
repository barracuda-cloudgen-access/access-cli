// Code generated by go-swagger; DO NOT EDIT.

package access_policies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/oNaiPs/fyde-cli/models"
)

// EditPolicyReader is a Reader for the EditPolicy structure.
type EditPolicyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EditPolicyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewEditPolicyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewEditPolicyUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewEditPolicyNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewEditPolicyOK creates a EditPolicyOK with default headers values
func NewEditPolicyOK() *EditPolicyOK {
	return &EditPolicyOK{}
}

/*EditPolicyOK handles this case with default header values.

Policy edited
*/
type EditPolicyOK struct {
	Payload *EditPolicyOKBody
}

func (o *EditPolicyOK) Error() string {
	return fmt.Sprintf("[PATCH /access_policies/{id}][%d] editPolicyOK  %+v", 200, o.Payload)
}

func (o *EditPolicyOK) GetPayload() *EditPolicyOKBody {
	return o.Payload
}

func (o *EditPolicyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(EditPolicyOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEditPolicyUnauthorized creates a EditPolicyUnauthorized with default headers values
func NewEditPolicyUnauthorized() *EditPolicyUnauthorized {
	return &EditPolicyUnauthorized{}
}

/*EditPolicyUnauthorized handles this case with default header values.

unauthorized: invalid credentials or missing authentication headers
*/
type EditPolicyUnauthorized struct {
	Payload *models.GenericUnauthorizedResponse
}

func (o *EditPolicyUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /access_policies/{id}][%d] editPolicyUnauthorized  %+v", 401, o.Payload)
}

func (o *EditPolicyUnauthorized) GetPayload() *models.GenericUnauthorizedResponse {
	return o.Payload
}

func (o *EditPolicyUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GenericUnauthorizedResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEditPolicyNotFound creates a EditPolicyNotFound with default headers values
func NewEditPolicyNotFound() *EditPolicyNotFound {
	return &EditPolicyNotFound{}
}

/*EditPolicyNotFound handles this case with default header values.

policy not found
*/
type EditPolicyNotFound struct {
}

func (o *EditPolicyNotFound) Error() string {
	return fmt.Sprintf("[PATCH /access_policies/{id}][%d] editPolicyNotFound ", 404)
}

func (o *EditPolicyNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*EditPolicyBody edit policy body
swagger:model EditPolicyBody
*/
type EditPolicyBody struct {

	// access policy
	AccessPolicy *EditPolicyParamsBodyAccessPolicy `json:"access_policy,omitempty"`
}

// Validate validates this edit policy body
func (o *EditPolicyBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAccessPolicy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *EditPolicyBody) validateAccessPolicy(formats strfmt.Registry) error {

	if swag.IsZero(o.AccessPolicy) { // not required
		return nil
	}

	if o.AccessPolicy != nil {
		if err := o.AccessPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policy" + "." + "access_policy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *EditPolicyBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *EditPolicyBody) UnmarshalBinary(b []byte) error {
	var res EditPolicyBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*EditPolicyOKBody edit policy o k body
swagger:model EditPolicyOKBody
*/
type EditPolicyOKBody struct {
	models.AccessPolicy

	// access resources
	AccessResources []*AccessResourcesItems0 `json:"access_resources"`

	// groups
	Groups []*GroupsItems0 `json:"groups"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *EditPolicyOKBody) UnmarshalJSON(raw []byte) error {
	// EditPolicyOKBodyAO0
	var editPolicyOKBodyAO0 models.AccessPolicy
	if err := swag.ReadJSON(raw, &editPolicyOKBodyAO0); err != nil {
		return err
	}
	o.AccessPolicy = editPolicyOKBodyAO0

	// EditPolicyOKBodyAO1
	var dataEditPolicyOKBodyAO1 struct {
		AccessResources []*AccessResourcesItems0 `json:"access_resources"`

		Groups []*GroupsItems0 `json:"groups"`
	}
	if err := swag.ReadJSON(raw, &dataEditPolicyOKBodyAO1); err != nil {
		return err
	}

	o.AccessResources = dataEditPolicyOKBodyAO1.AccessResources

	o.Groups = dataEditPolicyOKBodyAO1.Groups

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o EditPolicyOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	editPolicyOKBodyAO0, err := swag.WriteJSON(o.AccessPolicy)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, editPolicyOKBodyAO0)

	var dataEditPolicyOKBodyAO1 struct {
		AccessResources []*AccessResourcesItems0 `json:"access_resources"`

		Groups []*GroupsItems0 `json:"groups"`
	}

	dataEditPolicyOKBodyAO1.AccessResources = o.AccessResources

	dataEditPolicyOKBodyAO1.Groups = o.Groups

	jsonDataEditPolicyOKBodyAO1, errEditPolicyOKBodyAO1 := swag.WriteJSON(dataEditPolicyOKBodyAO1)
	if errEditPolicyOKBodyAO1 != nil {
		return nil, errEditPolicyOKBodyAO1
	}
	_parts = append(_parts, jsonDataEditPolicyOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this edit policy o k body
func (o *EditPolicyOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.AccessPolicy
	if err := o.AccessPolicy.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAccessResources(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateGroups(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *EditPolicyOKBody) validateAccessResources(formats strfmt.Registry) error {

	if swag.IsZero(o.AccessResources) { // not required
		return nil
	}

	for i := 0; i < len(o.AccessResources); i++ {
		if swag.IsZero(o.AccessResources[i]) { // not required
			continue
		}

		if o.AccessResources[i] != nil {
			if err := o.AccessResources[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("editPolicyOK" + "." + "access_resources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *EditPolicyOKBody) validateGroups(formats strfmt.Registry) error {

	if swag.IsZero(o.Groups) { // not required
		return nil
	}

	for i := 0; i < len(o.Groups); i++ {
		if swag.IsZero(o.Groups[i]) { // not required
			continue
		}

		if o.Groups[i] != nil {
			if err := o.Groups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("editPolicyOK" + "." + "groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *EditPolicyOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *EditPolicyOKBody) UnmarshalBinary(b []byte) error {
	var res EditPolicyOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*EditPolicyParamsBodyAccessPolicy edit policy params body access policy
swagger:model EditPolicyParamsBodyAccessPolicy
*/
type EditPolicyParamsBodyAccessPolicy struct {

	// access resource ids
	AccessResourceIds []strfmt.UUID `json:"access_resource_ids"`

	// conditions
	Conditions interface{} `json:"conditions,omitempty"`

	// group ids
	GroupIds []int64 `json:"group_ids"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this edit policy params body access policy
func (o *EditPolicyParamsBodyAccessPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAccessResourceIds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *EditPolicyParamsBodyAccessPolicy) validateAccessResourceIds(formats strfmt.Registry) error {

	if swag.IsZero(o.AccessResourceIds) { // not required
		return nil
	}

	for i := 0; i < len(o.AccessResourceIds); i++ {

		if err := validate.FormatOf("policy"+"."+"access_policy"+"."+"access_resource_ids"+"."+strconv.Itoa(i), "body", "uuid", o.AccessResourceIds[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *EditPolicyParamsBodyAccessPolicy) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *EditPolicyParamsBodyAccessPolicy) UnmarshalBinary(b []byte) error {
	var res EditPolicyParamsBodyAccessPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
