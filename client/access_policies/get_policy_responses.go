// Code generated by go-swagger; DO NOT EDIT.

package access_policies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/oNaiPs/fyde-cli/models"
)

// GetPolicyReader is a Reader for the GetPolicy structure.
type GetPolicyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPolicyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetPolicyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetPolicyUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetPolicyNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetPolicyOK creates a GetPolicyOK with default headers values
func NewGetPolicyOK() *GetPolicyOK {
	return &GetPolicyOK{}
}

/*GetPolicyOK handles this case with default header values.

Policy info
*/
type GetPolicyOK struct {
	Payload *GetPolicyOKBody
}

func (o *GetPolicyOK) Error() string {
	return fmt.Sprintf("[GET /access_policies/{id}][%d] getPolicyOK  %+v", 200, o.Payload)
}

func (o *GetPolicyOK) GetPayload() *GetPolicyOKBody {
	return o.Payload
}

func (o *GetPolicyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetPolicyOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPolicyUnauthorized creates a GetPolicyUnauthorized with default headers values
func NewGetPolicyUnauthorized() *GetPolicyUnauthorized {
	return &GetPolicyUnauthorized{}
}

/*GetPolicyUnauthorized handles this case with default header values.

unauthorized: invalid credentials or missing authentication headers
*/
type GetPolicyUnauthorized struct {
	Payload *models.GenericUnauthorizedResponse
}

func (o *GetPolicyUnauthorized) Error() string {
	return fmt.Sprintf("[GET /access_policies/{id}][%d] getPolicyUnauthorized  %+v", 401, o.Payload)
}

func (o *GetPolicyUnauthorized) GetPayload() *models.GenericUnauthorizedResponse {
	return o.Payload
}

func (o *GetPolicyUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GenericUnauthorizedResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPolicyNotFound creates a GetPolicyNotFound with default headers values
func NewGetPolicyNotFound() *GetPolicyNotFound {
	return &GetPolicyNotFound{}
}

/*GetPolicyNotFound handles this case with default header values.

policy not found
*/
type GetPolicyNotFound struct {
}

func (o *GetPolicyNotFound) Error() string {
	return fmt.Sprintf("[GET /access_policies/{id}][%d] getPolicyNotFound ", 404)
}

func (o *GetPolicyNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*GetPolicyOKBody get policy o k body
swagger:model GetPolicyOKBody
*/
type GetPolicyOKBody struct {
	models.AccessPolicy

	// access resources
	AccessResources []*AccessResourcesItems0 `json:"access_resources"`

	// groups
	Groups []*GroupsItems0 `json:"groups"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetPolicyOKBody) UnmarshalJSON(raw []byte) error {
	// GetPolicyOKBodyAO0
	var getPolicyOKBodyAO0 models.AccessPolicy
	if err := swag.ReadJSON(raw, &getPolicyOKBodyAO0); err != nil {
		return err
	}
	o.AccessPolicy = getPolicyOKBodyAO0

	// GetPolicyOKBodyAO1
	var dataGetPolicyOKBodyAO1 struct {
		AccessResources []*AccessResourcesItems0 `json:"access_resources"`

		Groups []*GroupsItems0 `json:"groups"`
	}
	if err := swag.ReadJSON(raw, &dataGetPolicyOKBodyAO1); err != nil {
		return err
	}

	o.AccessResources = dataGetPolicyOKBodyAO1.AccessResources

	o.Groups = dataGetPolicyOKBodyAO1.Groups

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetPolicyOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	getPolicyOKBodyAO0, err := swag.WriteJSON(o.AccessPolicy)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getPolicyOKBodyAO0)

	var dataGetPolicyOKBodyAO1 struct {
		AccessResources []*AccessResourcesItems0 `json:"access_resources"`

		Groups []*GroupsItems0 `json:"groups"`
	}

	dataGetPolicyOKBodyAO1.AccessResources = o.AccessResources

	dataGetPolicyOKBodyAO1.Groups = o.Groups

	jsonDataGetPolicyOKBodyAO1, errGetPolicyOKBodyAO1 := swag.WriteJSON(dataGetPolicyOKBodyAO1)
	if errGetPolicyOKBodyAO1 != nil {
		return nil, errGetPolicyOKBodyAO1
	}
	_parts = append(_parts, jsonDataGetPolicyOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get policy o k body
func (o *GetPolicyOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.AccessPolicy
	if err := o.AccessPolicy.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAccessResources(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateGroups(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPolicyOKBody) validateAccessResources(formats strfmt.Registry) error {

	if swag.IsZero(o.AccessResources) { // not required
		return nil
	}

	for i := 0; i < len(o.AccessResources); i++ {
		if swag.IsZero(o.AccessResources[i]) { // not required
			continue
		}

		if o.AccessResources[i] != nil {
			if err := o.AccessResources[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getPolicyOK" + "." + "access_resources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetPolicyOKBody) validateGroups(formats strfmt.Registry) error {

	if swag.IsZero(o.Groups) { // not required
		return nil
	}

	for i := 0; i < len(o.Groups); i++ {
		if swag.IsZero(o.Groups[i]) { // not required
			continue
		}

		if o.Groups[i] != nil {
			if err := o.Groups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getPolicyOK" + "." + "groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPolicyOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPolicyOKBody) UnmarshalBinary(b []byte) error {
	var res GetPolicyOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
