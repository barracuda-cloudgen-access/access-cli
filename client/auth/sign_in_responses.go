// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/oNaiPs/fyde-cli/models"
)

// SignInReader is a Reader for the SignIn structure.
type SignInReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SignInReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSignInOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewSignInUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewSignInOK creates a SignInOK with default headers values
func NewSignInOK() *SignInOK {
	return &SignInOK{}
}

/*SignInOK handles this case with default header values.

successful operation
*/
type SignInOK struct {
	/*Authentication - Access Token
	 */
	AccessToken string
	/*Authentication - Client
	 */
	Client string
	/*Authentication - Token Type (Bearer)
	 */
	TokenType string
	/*Authentication - User ID
	 */
	UID string

	Payload *models.SignInResponse
}

func (o *SignInOK) Error() string {
	return fmt.Sprintf("[POST /auth/sign_in][%d] signInOK  %+v", 200, o.Payload)
}

func (o *SignInOK) GetPayload() *models.SignInResponse {
	return o.Payload
}

func (o *SignInOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Access-Token
	o.AccessToken = response.GetHeader("Access-Token")

	// response header Client
	o.Client = response.GetHeader("Client")

	// response header Token-Type
	o.TokenType = response.GetHeader("Token-Type")

	// response header UID
	o.UID = response.GetHeader("UID")

	o.Payload = new(models.SignInResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSignInUnauthorized creates a SignInUnauthorized with default headers values
func NewSignInUnauthorized() *SignInUnauthorized {
	return &SignInUnauthorized{}
}

/*SignInUnauthorized handles this case with default header values.

unauthorized: invalid credentials
*/
type SignInUnauthorized struct {
	Payload *SignInUnauthorizedBody
}

func (o *SignInUnauthorized) Error() string {
	return fmt.Sprintf("[POST /auth/sign_in][%d] signInUnauthorized  %+v", 401, o.Payload)
}

func (o *SignInUnauthorized) GetPayload() *SignInUnauthorizedBody {
	return o.Payload
}

func (o *SignInUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SignInUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*SignInUnauthorizedBody sign in unauthorized body
swagger:model SignInUnauthorizedBody
*/
type SignInUnauthorizedBody struct {

	// errors
	Errors []string `json:"errors"`

	// success
	Success bool `json:"success,omitempty"`
}

// Validate validates this sign in unauthorized body
func (o *SignInUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SignInUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SignInUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res SignInUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
