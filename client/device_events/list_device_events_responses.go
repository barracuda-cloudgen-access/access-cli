// Code generated by go-swagger; DO NOT EDIT.

package device_events

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/oNaiPs/fyde-cli/models"
)

// ListDeviceEventsReader is a Reader for the ListDeviceEvents structure.
type ListDeviceEventsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListDeviceEventsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListDeviceEventsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewListDeviceEventsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewListDeviceEventsOK creates a ListDeviceEventsOK with default headers values
func NewListDeviceEventsOK() *ListDeviceEventsOK {
	return &ListDeviceEventsOK{}
}

/*ListDeviceEventsOK handles this case with default header values.

successful operation
*/
type ListDeviceEventsOK struct {
	/*Total number of items (for pagination)
	 */
	Total int64

	Payload []*models.DeviceEventListItem
}

func (o *ListDeviceEventsOK) Error() string {
	return fmt.Sprintf("[GET /device_events][%d] listDeviceEventsOK  %+v", 200, o.Payload)
}

func (o *ListDeviceEventsOK) GetPayload() []*models.DeviceEventListItem {
	return o.Payload
}

func (o *ListDeviceEventsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header total
	total, err := swag.ConvertInt64(response.GetHeader("total"))
	if err != nil {
		return errors.InvalidType("total", "header", "int64", response.GetHeader("total"))
	}
	o.Total = total

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListDeviceEventsUnauthorized creates a ListDeviceEventsUnauthorized with default headers values
func NewListDeviceEventsUnauthorized() *ListDeviceEventsUnauthorized {
	return &ListDeviceEventsUnauthorized{}
}

/*ListDeviceEventsUnauthorized handles this case with default header values.

unauthorized: invalid credentials or missing authentication headers
*/
type ListDeviceEventsUnauthorized struct {
	Payload *models.GenericUnauthorizedResponse
}

func (o *ListDeviceEventsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /device_events][%d] listDeviceEventsUnauthorized  %+v", 401, o.Payload)
}

func (o *ListDeviceEventsUnauthorized) GetPayload() *models.GenericUnauthorizedResponse {
	return o.Payload
}

func (o *ListDeviceEventsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GenericUnauthorizedResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
