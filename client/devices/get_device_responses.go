// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/oNaiPs/fyde-cli/models"
)

// GetDeviceReader is a Reader for the GetDevice structure.
type GetDeviceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDeviceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDeviceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetDeviceUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetDeviceOK creates a GetDeviceOK with default headers values
func NewGetDeviceOK() *GetDeviceOK {
	return &GetDeviceOK{}
}

/*GetDeviceOK handles this case with default header values.

Device info
*/
type GetDeviceOK struct {
	Payload *GetDeviceOKBody
}

func (o *GetDeviceOK) Error() string {
	return fmt.Sprintf("[GET /devices/{id}][%d] getDeviceOK  %+v", 200, o.Payload)
}

func (o *GetDeviceOK) GetPayload() *GetDeviceOKBody {
	return o.Payload
}

func (o *GetDeviceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetDeviceOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDeviceUnauthorized creates a GetDeviceUnauthorized with default headers values
func NewGetDeviceUnauthorized() *GetDeviceUnauthorized {
	return &GetDeviceUnauthorized{}
}

/*GetDeviceUnauthorized handles this case with default header values.

unauthorized: invalid credentials or missing authentication headers
*/
type GetDeviceUnauthorized struct {
	Payload *models.GenericUnauthorizedResponse
}

func (o *GetDeviceUnauthorized) Error() string {
	return fmt.Sprintf("[GET /devices/{id}][%d] getDeviceUnauthorized  %+v", 401, o.Payload)
}

func (o *GetDeviceUnauthorized) GetPayload() *models.GenericUnauthorizedResponse {
	return o.Payload
}

func (o *GetDeviceUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GenericUnauthorizedResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetDeviceOKBody get device o k body
swagger:model GetDeviceOKBody
*/
type GetDeviceOKBody struct {
	models.Device

	// enabled
	Enabled bool `json:"enabled,omitempty"`

	// notes
	Notes *string `json:"notes,omitempty"`

	// user
	User *GetDeviceOKBodyAO1User `json:"user,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetDeviceOKBody) UnmarshalJSON(raw []byte) error {
	// GetDeviceOKBodyAO0
	var getDeviceOKBodyAO0 models.Device
	if err := swag.ReadJSON(raw, &getDeviceOKBodyAO0); err != nil {
		return err
	}
	o.Device = getDeviceOKBodyAO0

	// GetDeviceOKBodyAO1
	var dataGetDeviceOKBodyAO1 struct {
		Enabled bool `json:"enabled,omitempty"`

		Notes *string `json:"notes,omitempty"`

		User *GetDeviceOKBodyAO1User `json:"user,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataGetDeviceOKBodyAO1); err != nil {
		return err
	}

	o.Enabled = dataGetDeviceOKBodyAO1.Enabled

	o.Notes = dataGetDeviceOKBodyAO1.Notes

	o.User = dataGetDeviceOKBodyAO1.User

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetDeviceOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	getDeviceOKBodyAO0, err := swag.WriteJSON(o.Device)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getDeviceOKBodyAO0)

	var dataGetDeviceOKBodyAO1 struct {
		Enabled bool `json:"enabled,omitempty"`

		Notes *string `json:"notes,omitempty"`

		User *GetDeviceOKBodyAO1User `json:"user,omitempty"`
	}

	dataGetDeviceOKBodyAO1.Enabled = o.Enabled

	dataGetDeviceOKBodyAO1.Notes = o.Notes

	dataGetDeviceOKBodyAO1.User = o.User

	jsonDataGetDeviceOKBodyAO1, errGetDeviceOKBodyAO1 := swag.WriteJSON(dataGetDeviceOKBodyAO1)
	if errGetDeviceOKBodyAO1 != nil {
		return nil, errGetDeviceOKBodyAO1
	}
	_parts = append(_parts, jsonDataGetDeviceOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get device o k body
func (o *GetDeviceOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Device
	if err := o.Device.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDeviceOKBody) validateUser(formats strfmt.Registry) error {

	if swag.IsZero(o.User) { // not required
		return nil
	}

	if o.User != nil {
		if err := o.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDeviceOK" + "." + "user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetDeviceOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDeviceOKBody) UnmarshalBinary(b []byte) error {
	var res GetDeviceOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetDeviceOKBodyAO1User get device o k body a o1 user
swagger:model GetDeviceOKBodyAO1User
*/
type GetDeviceOKBodyAO1User struct {

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// phone number
	PhoneNumber string `json:"phone_number,omitempty"`
}

// Validate validates this get device o k body a o1 user
func (o *GetDeviceOKBodyAO1User) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDeviceOKBodyAO1User) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("getDeviceOK"+"."+"user"+"."+"email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetDeviceOKBodyAO1User) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDeviceOKBodyAO1User) UnmarshalBinary(b []byte) error {
	var res GetDeviceOKBodyAO1User
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
