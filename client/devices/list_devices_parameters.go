// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewListDevicesParams creates a new ListDevicesParams object
// with the default values initialized.
func NewListDevicesParams() *ListDevicesParams {
	var ()
	return &ListDevicesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewListDevicesParamsWithTimeout creates a new ListDevicesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListDevicesParamsWithTimeout(timeout time.Duration) *ListDevicesParams {
	var ()
	return &ListDevicesParams{

		timeout: timeout,
	}
}

// NewListDevicesParamsWithContext creates a new ListDevicesParams object
// with the default values initialized, and the ability to set a context for a request
func NewListDevicesParamsWithContext(ctx context.Context) *ListDevicesParams {
	var ()
	return &ListDevicesParams{

		Context: ctx,
	}
}

// NewListDevicesParamsWithHTTPClient creates a new ListDevicesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListDevicesParamsWithHTTPClient(client *http.Client) *ListDevicesParams {
	var ()
	return &ListDevicesParams{
		HTTPClient: client,
	}
}

/*ListDevicesParams contains all the parameters to send to the API endpoint
for the list devices operation typically these are written to a http.Request
*/
type ListDevicesParams struct {

	/*Page
	  Page number

	*/
	Page *int64
	/*PerPage
	  Number of items to return per page

	*/
	PerPage *int64
	/*Sort
	  Sort results

	*/
	Sort *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list devices params
func (o *ListDevicesParams) WithTimeout(timeout time.Duration) *ListDevicesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list devices params
func (o *ListDevicesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list devices params
func (o *ListDevicesParams) WithContext(ctx context.Context) *ListDevicesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list devices params
func (o *ListDevicesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list devices params
func (o *ListDevicesParams) WithHTTPClient(client *http.Client) *ListDevicesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list devices params
func (o *ListDevicesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPage adds the page to the list devices params
func (o *ListDevicesParams) WithPage(page *int64) *ListDevicesParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the list devices params
func (o *ListDevicesParams) SetPage(page *int64) {
	o.Page = page
}

// WithPerPage adds the perPage to the list devices params
func (o *ListDevicesParams) WithPerPage(perPage *int64) *ListDevicesParams {
	o.SetPerPage(perPage)
	return o
}

// SetPerPage adds the perPage to the list devices params
func (o *ListDevicesParams) SetPerPage(perPage *int64) {
	o.PerPage = perPage
}

// WithSort adds the sort to the list devices params
func (o *ListDevicesParams) WithSort(sort *string) *ListDevicesParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the list devices params
func (o *ListDevicesParams) SetSort(sort *string) {
	o.Sort = sort
}

// WriteToRequest writes these params to a swagger request
func (o *ListDevicesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Page != nil {

		// query param page
		var qrPage int64
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if o.PerPage != nil {

		// query param per_page
		var qrPerPage int64
		if o.PerPage != nil {
			qrPerPage = *o.PerPage
		}
		qPerPage := swag.FormatInt64(qrPerPage)
		if qPerPage != "" {
			if err := r.SetQueryParam("per_page", qPerPage); err != nil {
				return err
			}
		}

	}

	if o.Sort != nil {

		// query param sort
		var qrSort string
		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {
			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
