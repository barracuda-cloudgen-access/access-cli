// Code generated by go-swagger; DO NOT EDIT.

package groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/oNaiPs/fyde-cli/models"
)

// CreateGroupReader is a Reader for the CreateGroup structure.
type CreateGroupReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateGroupReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateGroupCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewCreateGroupUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewCreateGroupCreated creates a CreateGroupCreated with default headers values
func NewCreateGroupCreated() *CreateGroupCreated {
	return &CreateGroupCreated{}
}

/*CreateGroupCreated handles this case with default header values.

Group created
*/
type CreateGroupCreated struct {
	Payload *CreateGroupCreatedBody
}

func (o *CreateGroupCreated) Error() string {
	return fmt.Sprintf("[POST /groups][%d] createGroupCreated  %+v", 201, o.Payload)
}

func (o *CreateGroupCreated) GetPayload() *CreateGroupCreatedBody {
	return o.Payload
}

func (o *CreateGroupCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreateGroupCreatedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateGroupUnauthorized creates a CreateGroupUnauthorized with default headers values
func NewCreateGroupUnauthorized() *CreateGroupUnauthorized {
	return &CreateGroupUnauthorized{}
}

/*CreateGroupUnauthorized handles this case with default header values.

unauthorized: invalid credentials or missing authentication headers
*/
type CreateGroupUnauthorized struct {
	Payload *models.GenericUnauthorizedResponse
}

func (o *CreateGroupUnauthorized) Error() string {
	return fmt.Sprintf("[POST /groups][%d] createGroupUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateGroupUnauthorized) GetPayload() *models.GenericUnauthorizedResponse {
	return o.Payload
}

func (o *CreateGroupUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GenericUnauthorizedResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*CreateGroupBody create group body
swagger:model CreateGroupBody
*/
type CreateGroupBody struct {

	// group
	Group *CreateGroupParamsBodyGroup `json:"group,omitempty"`
}

// Validate validates this create group body
func (o *CreateGroupBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateGroup(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateGroupBody) validateGroup(formats strfmt.Registry) error {

	if swag.IsZero(o.Group) { // not required
		return nil
	}

	if o.Group != nil {
		if err := o.Group.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("group" + "." + "group")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateGroupBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateGroupBody) UnmarshalBinary(b []byte) error {
	var res CreateGroupBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateGroupCreatedBody create group created body
swagger:model CreateGroupCreatedBody
*/
type CreateGroupCreatedBody struct {
	models.Group

	// users
	Users []*UsersItems0 `json:"users"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *CreateGroupCreatedBody) UnmarshalJSON(raw []byte) error {
	// CreateGroupCreatedBodyAO0
	var createGroupCreatedBodyAO0 models.Group
	if err := swag.ReadJSON(raw, &createGroupCreatedBodyAO0); err != nil {
		return err
	}
	o.Group = createGroupCreatedBodyAO0

	// CreateGroupCreatedBodyAO1
	var dataCreateGroupCreatedBodyAO1 struct {
		Users []*UsersItems0 `json:"users"`
	}
	if err := swag.ReadJSON(raw, &dataCreateGroupCreatedBodyAO1); err != nil {
		return err
	}

	o.Users = dataCreateGroupCreatedBodyAO1.Users

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o CreateGroupCreatedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	createGroupCreatedBodyAO0, err := swag.WriteJSON(o.Group)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, createGroupCreatedBodyAO0)

	var dataCreateGroupCreatedBodyAO1 struct {
		Users []*UsersItems0 `json:"users"`
	}

	dataCreateGroupCreatedBodyAO1.Users = o.Users

	jsonDataCreateGroupCreatedBodyAO1, errCreateGroupCreatedBodyAO1 := swag.WriteJSON(dataCreateGroupCreatedBodyAO1)
	if errCreateGroupCreatedBodyAO1 != nil {
		return nil, errCreateGroupCreatedBodyAO1
	}
	_parts = append(_parts, jsonDataCreateGroupCreatedBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this create group created body
func (o *CreateGroupCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Group
	if err := o.Group.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUsers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateGroupCreatedBody) validateUsers(formats strfmt.Registry) error {

	if swag.IsZero(o.Users) { // not required
		return nil
	}

	for i := 0; i < len(o.Users); i++ {
		if swag.IsZero(o.Users[i]) { // not required
			continue
		}

		if o.Users[i] != nil {
			if err := o.Users[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createGroupCreated" + "." + "users" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateGroupCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateGroupCreatedBody) UnmarshalBinary(b []byte) error {
	var res CreateGroupCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateGroupParamsBodyGroup create group params body group
swagger:model CreateGroupParamsBodyGroup
*/
type CreateGroupParamsBodyGroup struct {

	// color
	Color string `json:"color,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this create group params body group
func (o *CreateGroupParamsBodyGroup) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateGroupParamsBodyGroup) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateGroupParamsBodyGroup) UnmarshalBinary(b []byte) error {
	var res CreateGroupParamsBodyGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UsersItems0 users items0
swagger:model UsersItems0
*/
type UsersItems0 struct {

	// id
	ID int64 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this users items0
func (o *UsersItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UsersItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UsersItems0) UnmarshalBinary(b []byte) error {
	var res UsersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
