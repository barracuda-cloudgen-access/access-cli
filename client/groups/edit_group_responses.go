// Code generated by go-swagger; DO NOT EDIT.

package groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/oNaiPs/fyde-cli/models"
)

// EditGroupReader is a Reader for the EditGroup structure.
type EditGroupReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EditGroupReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewEditGroupOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewEditGroupUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewEditGroupNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewEditGroupOK creates a EditGroupOK with default headers values
func NewEditGroupOK() *EditGroupOK {
	return &EditGroupOK{}
}

/*EditGroupOK handles this case with default header values.

Group edited
*/
type EditGroupOK struct {
	Payload *EditGroupOKBody
}

func (o *EditGroupOK) Error() string {
	return fmt.Sprintf("[PATCH /groups/{id}][%d] editGroupOK  %+v", 200, o.Payload)
}

func (o *EditGroupOK) GetPayload() *EditGroupOKBody {
	return o.Payload
}

func (o *EditGroupOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(EditGroupOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEditGroupUnauthorized creates a EditGroupUnauthorized with default headers values
func NewEditGroupUnauthorized() *EditGroupUnauthorized {
	return &EditGroupUnauthorized{}
}

/*EditGroupUnauthorized handles this case with default header values.

unauthorized: invalid credentials or missing authentication headers
*/
type EditGroupUnauthorized struct {
	Payload *models.GenericUnauthorizedResponse
}

func (o *EditGroupUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /groups/{id}][%d] editGroupUnauthorized  %+v", 401, o.Payload)
}

func (o *EditGroupUnauthorized) GetPayload() *models.GenericUnauthorizedResponse {
	return o.Payload
}

func (o *EditGroupUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GenericUnauthorizedResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEditGroupNotFound creates a EditGroupNotFound with default headers values
func NewEditGroupNotFound() *EditGroupNotFound {
	return &EditGroupNotFound{}
}

/*EditGroupNotFound handles this case with default header values.

group not found
*/
type EditGroupNotFound struct {
}

func (o *EditGroupNotFound) Error() string {
	return fmt.Sprintf("[PATCH /groups/{id}][%d] editGroupNotFound ", 404)
}

func (o *EditGroupNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*EditGroupBody edit group body
swagger:model EditGroupBody
*/
type EditGroupBody struct {

	// group
	Group *models.Group `json:"group,omitempty"`
}

// Validate validates this edit group body
func (o *EditGroupBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateGroup(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *EditGroupBody) validateGroup(formats strfmt.Registry) error {

	if swag.IsZero(o.Group) { // not required
		return nil
	}

	if o.Group != nil {
		if err := o.Group.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("group" + "." + "group")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *EditGroupBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *EditGroupBody) UnmarshalBinary(b []byte) error {
	var res EditGroupBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*EditGroupOKBody edit group o k body
swagger:model EditGroupOKBody
*/
type EditGroupOKBody struct {
	models.Group

	// users
	Users []*UsersItems0 `json:"users"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *EditGroupOKBody) UnmarshalJSON(raw []byte) error {
	// EditGroupOKBodyAO0
	var editGroupOKBodyAO0 models.Group
	if err := swag.ReadJSON(raw, &editGroupOKBodyAO0); err != nil {
		return err
	}
	o.Group = editGroupOKBodyAO0

	// EditGroupOKBodyAO1
	var dataEditGroupOKBodyAO1 struct {
		Users []*UsersItems0 `json:"users"`
	}
	if err := swag.ReadJSON(raw, &dataEditGroupOKBodyAO1); err != nil {
		return err
	}

	o.Users = dataEditGroupOKBodyAO1.Users

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o EditGroupOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	editGroupOKBodyAO0, err := swag.WriteJSON(o.Group)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, editGroupOKBodyAO0)

	var dataEditGroupOKBodyAO1 struct {
		Users []*UsersItems0 `json:"users"`
	}

	dataEditGroupOKBodyAO1.Users = o.Users

	jsonDataEditGroupOKBodyAO1, errEditGroupOKBodyAO1 := swag.WriteJSON(dataEditGroupOKBodyAO1)
	if errEditGroupOKBodyAO1 != nil {
		return nil, errEditGroupOKBodyAO1
	}
	_parts = append(_parts, jsonDataEditGroupOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this edit group o k body
func (o *EditGroupOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Group
	if err := o.Group.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUsers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *EditGroupOKBody) validateUsers(formats strfmt.Registry) error {

	if swag.IsZero(o.Users) { // not required
		return nil
	}

	for i := 0; i < len(o.Users); i++ {
		if swag.IsZero(o.Users[i]) { // not required
			continue
		}

		if o.Users[i] != nil {
			if err := o.Users[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("editGroupOK" + "." + "users" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *EditGroupOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *EditGroupOKBody) UnmarshalBinary(b []byte) error {
	var res EditGroupOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
