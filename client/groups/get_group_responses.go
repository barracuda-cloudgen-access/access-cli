// Code generated by go-swagger; DO NOT EDIT.

package groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/oNaiPs/fyde-cli/models"
)

// GetGroupReader is a Reader for the GetGroup structure.
type GetGroupReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetGroupReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetGroupOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetGroupUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetGroupNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetGroupOK creates a GetGroupOK with default headers values
func NewGetGroupOK() *GetGroupOK {
	return &GetGroupOK{}
}

/*GetGroupOK handles this case with default header values.

Group info
*/
type GetGroupOK struct {
	Payload *GetGroupOKBody
}

func (o *GetGroupOK) Error() string {
	return fmt.Sprintf("[GET /groups/{id}][%d] getGroupOK  %+v", 200, o.Payload)
}

func (o *GetGroupOK) GetPayload() *GetGroupOKBody {
	return o.Payload
}

func (o *GetGroupOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetGroupOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGroupUnauthorized creates a GetGroupUnauthorized with default headers values
func NewGetGroupUnauthorized() *GetGroupUnauthorized {
	return &GetGroupUnauthorized{}
}

/*GetGroupUnauthorized handles this case with default header values.

unauthorized: invalid credentials or missing authentication headers
*/
type GetGroupUnauthorized struct {
	Payload *models.GenericUnauthorizedResponse
}

func (o *GetGroupUnauthorized) Error() string {
	return fmt.Sprintf("[GET /groups/{id}][%d] getGroupUnauthorized  %+v", 401, o.Payload)
}

func (o *GetGroupUnauthorized) GetPayload() *models.GenericUnauthorizedResponse {
	return o.Payload
}

func (o *GetGroupUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GenericUnauthorizedResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGroupNotFound creates a GetGroupNotFound with default headers values
func NewGetGroupNotFound() *GetGroupNotFound {
	return &GetGroupNotFound{}
}

/*GetGroupNotFound handles this case with default header values.

group not found
*/
type GetGroupNotFound struct {
}

func (o *GetGroupNotFound) Error() string {
	return fmt.Sprintf("[GET /groups/{id}][%d] getGroupNotFound ", 404)
}

func (o *GetGroupNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*GetGroupOKBody get group o k body
swagger:model GetGroupOKBody
*/
type GetGroupOKBody struct {
	models.Group

	// users
	Users []*UsersItems0 `json:"users"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetGroupOKBody) UnmarshalJSON(raw []byte) error {
	// GetGroupOKBodyAO0
	var getGroupOKBodyAO0 models.Group
	if err := swag.ReadJSON(raw, &getGroupOKBodyAO0); err != nil {
		return err
	}
	o.Group = getGroupOKBodyAO0

	// GetGroupOKBodyAO1
	var dataGetGroupOKBodyAO1 struct {
		Users []*UsersItems0 `json:"users"`
	}
	if err := swag.ReadJSON(raw, &dataGetGroupOKBodyAO1); err != nil {
		return err
	}

	o.Users = dataGetGroupOKBodyAO1.Users

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetGroupOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	getGroupOKBodyAO0, err := swag.WriteJSON(o.Group)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getGroupOKBodyAO0)

	var dataGetGroupOKBodyAO1 struct {
		Users []*UsersItems0 `json:"users"`
	}

	dataGetGroupOKBodyAO1.Users = o.Users

	jsonDataGetGroupOKBodyAO1, errGetGroupOKBodyAO1 := swag.WriteJSON(dataGetGroupOKBodyAO1)
	if errGetGroupOKBodyAO1 != nil {
		return nil, errGetGroupOKBodyAO1
	}
	_parts = append(_parts, jsonDataGetGroupOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get group o k body
func (o *GetGroupOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Group
	if err := o.Group.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUsers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetGroupOKBody) validateUsers(formats strfmt.Registry) error {

	if swag.IsZero(o.Users) { // not required
		return nil
	}

	for i := 0; i < len(o.Users); i++ {
		if swag.IsZero(o.Users[i]) { // not required
			continue
		}

		if o.Users[i] != nil {
			if err := o.Users[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getGroupOK" + "." + "users" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetGroupOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetGroupOKBody) UnmarshalBinary(b []byte) error {
	var res GetGroupOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
