// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/oNaiPs/fyde-cli/models"
)

// CreateUserReader is a Reader for the CreateUser structure.
type CreateUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateUserCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewCreateUserUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewCreateUserCreated creates a CreateUserCreated with default headers values
func NewCreateUserCreated() *CreateUserCreated {
	return &CreateUserCreated{}
}

/*CreateUserCreated handles this case with default header values.

User created
*/
type CreateUserCreated struct {
	Payload *CreateUserCreatedBody
}

func (o *CreateUserCreated) Error() string {
	return fmt.Sprintf("[POST /users][%d] createUserCreated  %+v", 201, o.Payload)
}

func (o *CreateUserCreated) GetPayload() *CreateUserCreatedBody {
	return o.Payload
}

func (o *CreateUserCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreateUserCreatedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateUserUnauthorized creates a CreateUserUnauthorized with default headers values
func NewCreateUserUnauthorized() *CreateUserUnauthorized {
	return &CreateUserUnauthorized{}
}

/*CreateUserUnauthorized handles this case with default header values.

unauthorized: invalid credentials or missing authentication headers
*/
type CreateUserUnauthorized struct {
	Payload *models.GenericUnauthorizedResponse
}

func (o *CreateUserUnauthorized) Error() string {
	return fmt.Sprintf("[POST /users][%d] createUserUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateUserUnauthorized) GetPayload() *models.GenericUnauthorizedResponse {
	return o.Payload
}

func (o *CreateUserUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GenericUnauthorizedResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*CreateUserBody create user body
swagger:model CreateUserBody
*/
type CreateUserBody struct {

	// user
	User *CreateUserParamsBodyUser `json:"user,omitempty"`
}

// Validate validates this create user body
func (o *CreateUserBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateUserBody) validateUser(formats strfmt.Registry) error {

	if swag.IsZero(o.User) { // not required
		return nil
	}

	if o.User != nil {
		if err := o.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user" + "." + "user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateUserBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateUserBody) UnmarshalBinary(b []byte) error {
	var res CreateUserBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateUserCreatedBody create user created body
swagger:model CreateUserCreatedBody
*/
type CreateUserCreatedBody struct {
	models.User

	// devices
	Devices []interface{} `json:"devices"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *CreateUserCreatedBody) UnmarshalJSON(raw []byte) error {
	// CreateUserCreatedBodyAO0
	var createUserCreatedBodyAO0 models.User
	if err := swag.ReadJSON(raw, &createUserCreatedBodyAO0); err != nil {
		return err
	}
	o.User = createUserCreatedBodyAO0

	// CreateUserCreatedBodyAO1
	var dataCreateUserCreatedBodyAO1 struct {
		Devices []interface{} `json:"devices"`
	}
	if err := swag.ReadJSON(raw, &dataCreateUserCreatedBodyAO1); err != nil {
		return err
	}

	o.Devices = dataCreateUserCreatedBodyAO1.Devices

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o CreateUserCreatedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	createUserCreatedBodyAO0, err := swag.WriteJSON(o.User)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, createUserCreatedBodyAO0)

	var dataCreateUserCreatedBodyAO1 struct {
		Devices []interface{} `json:"devices"`
	}

	dataCreateUserCreatedBodyAO1.Devices = o.Devices

	jsonDataCreateUserCreatedBodyAO1, errCreateUserCreatedBodyAO1 := swag.WriteJSON(dataCreateUserCreatedBodyAO1)
	if errCreateUserCreatedBodyAO1 != nil {
		return nil, errCreateUserCreatedBodyAO1
	}
	_parts = append(_parts, jsonDataCreateUserCreatedBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this create user created body
func (o *CreateUserCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.User
	if err := o.User.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *CreateUserCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateUserCreatedBody) UnmarshalBinary(b []byte) error {
	var res CreateUserCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateUserParamsBodyUser create user params body user
swagger:model CreateUserParamsBodyUser
*/
type CreateUserParamsBodyUser struct {

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// enabled
	Enabled bool `json:"enabled,omitempty"`

	// group ids
	GroupIds []int64 `json:"group_ids"`

	// name
	Name string `json:"name,omitempty"`

	// phone number
	PhoneNumber string `json:"phone_number,omitempty"`

	// send email invitation
	SendEmailInvitation bool `json:"send_email_invitation,omitempty"`
}

// Validate validates this create user params body user
func (o *CreateUserParamsBodyUser) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateUserParamsBodyUser) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("user"+"."+"user"+"."+"email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateUserParamsBodyUser) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateUserParamsBodyUser) UnmarshalBinary(b []byte) error {
	var res CreateUserParamsBodyUser
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
