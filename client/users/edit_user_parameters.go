// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewEditUserParams creates a new EditUserParams object
// with the default values initialized.
func NewEditUserParams() *EditUserParams {
	var ()
	return &EditUserParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewEditUserParamsWithTimeout creates a new EditUserParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewEditUserParamsWithTimeout(timeout time.Duration) *EditUserParams {
	var ()
	return &EditUserParams{

		timeout: timeout,
	}
}

// NewEditUserParamsWithContext creates a new EditUserParams object
// with the default values initialized, and the ability to set a context for a request
func NewEditUserParamsWithContext(ctx context.Context) *EditUserParams {
	var ()
	return &EditUserParams{

		Context: ctx,
	}
}

// NewEditUserParamsWithHTTPClient creates a new EditUserParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewEditUserParamsWithHTTPClient(client *http.Client) *EditUserParams {
	var ()
	return &EditUserParams{
		HTTPClient: client,
	}
}

/*EditUserParams contains all the parameters to send to the API endpoint
for the edit user operation typically these are written to a http.Request
*/
type EditUserParams struct {

	/*ID
	  The ID of the user to edit

	*/
	ID int64
	/*User
	  User information to modify

	*/
	User EditUserBody

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the edit user params
func (o *EditUserParams) WithTimeout(timeout time.Duration) *EditUserParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the edit user params
func (o *EditUserParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the edit user params
func (o *EditUserParams) WithContext(ctx context.Context) *EditUserParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the edit user params
func (o *EditUserParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the edit user params
func (o *EditUserParams) WithHTTPClient(client *http.Client) *EditUserParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the edit user params
func (o *EditUserParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the edit user params
func (o *EditUserParams) WithID(id int64) *EditUserParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the edit user params
func (o *EditUserParams) SetID(id int64) {
	o.ID = id
}

// WithUser adds the user to the edit user params
func (o *EditUserParams) WithUser(user EditUserBody) *EditUserParams {
	o.SetUser(user)
	return o
}

// SetUser adds the user to the edit user params
func (o *EditUserParams) SetUser(user EditUserBody) {
	o.User = user
}

// WriteToRequest writes these params to a swagger request
func (o *EditUserParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt64(o.ID)); err != nil {
		return err
	}

	if err := r.SetBodyParam(o.User); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
