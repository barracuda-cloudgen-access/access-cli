// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewListUsersParams creates a new ListUsersParams object
// with the default values initialized.
func NewListUsersParams() *ListUsersParams {
	var ()
	return &ListUsersParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewListUsersParamsWithTimeout creates a new ListUsersParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListUsersParamsWithTimeout(timeout time.Duration) *ListUsersParams {
	var ()
	return &ListUsersParams{

		timeout: timeout,
	}
}

// NewListUsersParamsWithContext creates a new ListUsersParams object
// with the default values initialized, and the ability to set a context for a request
func NewListUsersParamsWithContext(ctx context.Context) *ListUsersParams {
	var ()
	return &ListUsersParams{

		Context: ctx,
	}
}

// NewListUsersParamsWithHTTPClient creates a new ListUsersParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListUsersParamsWithHTTPClient(client *http.Client) *ListUsersParams {
	var ()
	return &ListUsersParams{
		HTTPClient: client,
	}
}

/*ListUsersParams contains all the parameters to send to the API endpoint
for the list users operation typically these are written to a http.Request
*/
type ListUsersParams struct {

	/*EnrollmentStatus
	  Restrict enrollment status of the returned users

	*/
	EnrollmentStatus *string
	/*GroupName
	  Restrict groups of the returned users

	*/
	GroupName []string
	/*Sort
	  Sort results

	*/
	Sort *string
	/*Status
	  Restrict status of the returned users

	*/
	Status *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list users params
func (o *ListUsersParams) WithTimeout(timeout time.Duration) *ListUsersParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list users params
func (o *ListUsersParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list users params
func (o *ListUsersParams) WithContext(ctx context.Context) *ListUsersParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list users params
func (o *ListUsersParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list users params
func (o *ListUsersParams) WithHTTPClient(client *http.Client) *ListUsersParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list users params
func (o *ListUsersParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEnrollmentStatus adds the enrollmentStatus to the list users params
func (o *ListUsersParams) WithEnrollmentStatus(enrollmentStatus *string) *ListUsersParams {
	o.SetEnrollmentStatus(enrollmentStatus)
	return o
}

// SetEnrollmentStatus adds the enrollmentStatus to the list users params
func (o *ListUsersParams) SetEnrollmentStatus(enrollmentStatus *string) {
	o.EnrollmentStatus = enrollmentStatus
}

// WithGroupName adds the groupName to the list users params
func (o *ListUsersParams) WithGroupName(groupName []string) *ListUsersParams {
	o.SetGroupName(groupName)
	return o
}

// SetGroupName adds the groupName to the list users params
func (o *ListUsersParams) SetGroupName(groupName []string) {
	o.GroupName = groupName
}

// WithSort adds the sort to the list users params
func (o *ListUsersParams) WithSort(sort *string) *ListUsersParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the list users params
func (o *ListUsersParams) SetSort(sort *string) {
	o.Sort = sort
}

// WithStatus adds the status to the list users params
func (o *ListUsersParams) WithStatus(status *string) *ListUsersParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the list users params
func (o *ListUsersParams) SetStatus(status *string) {
	o.Status = status
}

// WriteToRequest writes these params to a swagger request
func (o *ListUsersParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.EnrollmentStatus != nil {

		// query param enrollment_status
		var qrEnrollmentStatus string
		if o.EnrollmentStatus != nil {
			qrEnrollmentStatus = *o.EnrollmentStatus
		}
		qEnrollmentStatus := qrEnrollmentStatus
		if qEnrollmentStatus != "" {
			if err := r.SetQueryParam("enrollment_status", qEnrollmentStatus); err != nil {
				return err
			}
		}

	}

	valuesGroupName := o.GroupName

	joinedGroupName := swag.JoinByFormat(valuesGroupName, "multi")
	// query array param group_name[]
	if err := r.SetQueryParam("group_name[]", joinedGroupName...); err != nil {
		return err
	}

	if o.Sort != nil {

		// query param sort
		var qrSort string
		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {
			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}

	}

	if o.Status != nil {

		// query param status
		var qrStatus string
		if o.Status != nil {
			qrStatus = *o.Status
		}
		qStatus := qrStatus
		if qStatus != "" {
			if err := r.SetQueryParam("status", qStatus); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
