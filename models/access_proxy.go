// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AccessProxy access proxy
// swagger:model AccessProxy
type AccessProxy struct {

	// access count
	AccessCount *AccessProxyAccessCount `json:"access_count,omitempty"`

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// host
	Host string `json:"host,omitempty"`

	// id
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// last access at
	// Format: date-time
	LastAccessAt *strfmt.DateTime `json:"last_access_at,omitempty"`

	// location
	Location string `json:"location,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// port
	Port int64 `json:"port,omitempty"`

	// status
	// Enum: [proxy_pending proxy_enabled]
	Status string `json:"status,omitempty"`

	// tenant id
	// Format: uuid
	TenantID strfmt.UUID `json:"tenant_id,omitempty"`

	// updated at
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`
}

// Validate validates this access proxy
func (m *AccessProxy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastAccessAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenantID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccessProxy) validateAccessCount(formats strfmt.Registry) error {

	if swag.IsZero(m.AccessCount) { // not required
		return nil
	}

	if m.AccessCount != nil {
		if err := m.AccessCount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("access_count")
			}
			return err
		}
	}

	return nil
}

func (m *AccessProxy) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AccessProxy) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AccessProxy) validateLastAccessAt(formats strfmt.Registry) error {

	if swag.IsZero(m.LastAccessAt) { // not required
		return nil
	}

	if err := validate.FormatOf("last_access_at", "body", "date-time", m.LastAccessAt.String(), formats); err != nil {
		return err
	}

	return nil
}

var accessProxyTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["proxy_pending","proxy_enabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		accessProxyTypeStatusPropEnum = append(accessProxyTypeStatusPropEnum, v)
	}
}

const (

	// AccessProxyStatusProxyPending captures enum value "proxy_pending"
	AccessProxyStatusProxyPending string = "proxy_pending"

	// AccessProxyStatusProxyEnabled captures enum value "proxy_enabled"
	AccessProxyStatusProxyEnabled string = "proxy_enabled"
)

// prop value enum
func (m *AccessProxy) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, accessProxyTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AccessProxy) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *AccessProxy) validateTenantID(formats strfmt.Registry) error {

	if swag.IsZero(m.TenantID) { // not required
		return nil
	}

	if err := validate.FormatOf("tenant_id", "body", "uuid", m.TenantID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AccessProxy) validateUpdatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AccessProxy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccessProxy) UnmarshalBinary(b []byte) error {
	var res AccessProxy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AccessProxyAccessCount access proxy access count
// swagger:model AccessProxyAccessCount
type AccessProxyAccessCount struct {

	// denied
	Denied int64 `json:"denied,omitempty"`

	// granted
	Granted int64 `json:"granted,omitempty"`
}

// Validate validates this access proxy access count
func (m *AccessProxyAccessCount) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AccessProxyAccessCount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccessProxyAccessCount) UnmarshalBinary(b []byte) error {
	var res AccessProxyAccessCount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
