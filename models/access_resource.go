// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AccessResource access resource
// swagger:model AccessResource
type AccessResource struct {

	// access policies
	AccessPolicies []*AccessResourceAccessPoliciesItems0 `json:"access_policies"`

	// enabled
	Enabled bool `json:"enabled,omitempty"`

	// id
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// internal host
	InternalHost string `json:"internal_host,omitempty"`

	// internal ports
	InternalPorts []string `json:"internal_ports"`

	// name
	Name string `json:"name,omitempty"`

	// notes
	Notes string `json:"notes,omitempty"`

	// ports
	Ports []string `json:"ports"`

	// public host
	PublicHost string `json:"public_host,omitempty"`

	// public ports
	PublicPorts []string `json:"public_ports"`
}

// Validate validates this access resource
func (m *AccessResource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessPolicies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccessResource) validateAccessPolicies(formats strfmt.Registry) error {

	if swag.IsZero(m.AccessPolicies) { // not required
		return nil
	}

	for i := 0; i < len(m.AccessPolicies); i++ {
		if swag.IsZero(m.AccessPolicies[i]) { // not required
			continue
		}

		if m.AccessPolicies[i] != nil {
			if err := m.AccessPolicies[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("access_policies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AccessResource) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AccessResource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccessResource) UnmarshalBinary(b []byte) error {
	var res AccessResource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AccessResourceAccessPoliciesItems0 access resource access policies items0
// swagger:model AccessResourceAccessPoliciesItems0
type AccessResourceAccessPoliciesItems0 struct {

	// id
	ID int64 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this access resource access policies items0
func (m *AccessResourceAccessPoliciesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AccessResourceAccessPoliciesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccessResourceAccessPoliciesItems0) UnmarshalBinary(b []byte) error {
	var res AccessResourceAccessPoliciesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
