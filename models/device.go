// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Device device
// swagger:model Device
type Device struct {

	// app version
	AppVersion string `json:"app_version,omitempty"`

	// brand
	Brand string `json:"brand,omitempty"`

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// enrollment id
	// Format: uuid
	EnrollmentID strfmt.UUID `json:"enrollment_id,omitempty"`

	// hardware model
	HardwareModel string `json:"hardware_model,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// last report at
	// Format: date-time
	LastReportAt strfmt.DateTime `json:"last_report_at,omitempty"`

	// os
	Os string `json:"os,omitempty"`

	// os version
	OsVersion string `json:"os_version,omitempty"`

	// security checks
	SecurityChecks []*DeviceSecurityChecksItems0 `json:"security_checks"`

	// status
	// Enum: [require_auth enrolled]
	Status string `json:"status,omitempty"`

	// updated at
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`

	// user
	User *DeviceUser `json:"user,omitempty"`
}

// Validate validates this device
func (m *Device) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnrollmentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastReportAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurityChecks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Device) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Device) validateEnrollmentID(formats strfmt.Registry) error {

	if swag.IsZero(m.EnrollmentID) { // not required
		return nil
	}

	if err := validate.FormatOf("enrollment_id", "body", "uuid", m.EnrollmentID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Device) validateLastReportAt(formats strfmt.Registry) error {

	if swag.IsZero(m.LastReportAt) { // not required
		return nil
	}

	if err := validate.FormatOf("last_report_at", "body", "date-time", m.LastReportAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Device) validateSecurityChecks(formats strfmt.Registry) error {

	if swag.IsZero(m.SecurityChecks) { // not required
		return nil
	}

	for i := 0; i < len(m.SecurityChecks); i++ {
		if swag.IsZero(m.SecurityChecks[i]) { // not required
			continue
		}

		if m.SecurityChecks[i] != nil {
			if err := m.SecurityChecks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("security_checks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var deviceTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["require_auth","enrolled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deviceTypeStatusPropEnum = append(deviceTypeStatusPropEnum, v)
	}
}

const (

	// DeviceStatusRequireAuth captures enum value "require_auth"
	DeviceStatusRequireAuth string = "require_auth"

	// DeviceStatusEnrolled captures enum value "enrolled"
	DeviceStatusEnrolled string = "enrolled"
)

// prop value enum
func (m *Device) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, deviceTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Device) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *Device) validateUpdatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Device) validateUser(formats strfmt.Registry) error {

	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Device) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Device) UnmarshalBinary(b []byte) error {
	var res Device
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DeviceSecurityChecksItems0 device security checks items0
// swagger:model DeviceSecurityChecksItems0
type DeviceSecurityChecksItems0 struct {

	// category
	Category string `json:"category,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// subcategory
	Subcategory string `json:"subcategory,omitempty"`

	// timestamp
	// Format: date-time
	Timestamp strfmt.DateTime `json:"timestamp,omitempty"`
}

// Validate validates this device security checks items0
func (m *DeviceSecurityChecksItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceSecurityChecksItems0) validateTimestamp(formats strfmt.Registry) error {

	if swag.IsZero(m.Timestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("timestamp", "body", "date-time", m.Timestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceSecurityChecksItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceSecurityChecksItems0) UnmarshalBinary(b []byte) error {
	var res DeviceSecurityChecksItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DeviceUser device user
// swagger:model DeviceUser
type DeviceUser struct {

	// id
	ID int64 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this device user
func (m *DeviceUser) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DeviceUser) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceUser) UnmarshalBinary(b []byte) error {
	var res DeviceUser
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
