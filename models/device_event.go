// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeviceEvent device event
// swagger:model DeviceEvent
type DeviceEvent struct {

	// app
	App *DeviceEventApp `json:"app,omitempty"`

	// date
	Date *DeviceEventDate `json:"date,omitempty"`

	// device
	Device *DeviceEventDevice `json:"device,omitempty"`

	// geo
	Geo *DeviceEventGeo `json:"geo,omitempty"`

	// id
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// params
	Params interface{} `json:"params,omitempty"`

	// tenant
	Tenant *DeviceEventTenant `json:"tenant,omitempty"`

	// user
	User *DeviceEventUser `json:"user,omitempty"`
}

// Validate validates this device event
func (m *DeviceEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDevice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGeo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenant(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceEvent) validateApp(formats strfmt.Registry) error {

	if swag.IsZero(m.App) { // not required
		return nil
	}

	if m.App != nil {
		if err := m.App.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("app")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceEvent) validateDate(formats strfmt.Registry) error {

	if swag.IsZero(m.Date) { // not required
		return nil
	}

	if m.Date != nil {
		if err := m.Date.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("date")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceEvent) validateDevice(formats strfmt.Registry) error {

	if swag.IsZero(m.Device) { // not required
		return nil
	}

	if m.Device != nil {
		if err := m.Device.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("device")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceEvent) validateGeo(formats strfmt.Registry) error {

	if swag.IsZero(m.Geo) { // not required
		return nil
	}

	if m.Geo != nil {
		if err := m.Geo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("geo")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceEvent) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DeviceEvent) validateTenant(formats strfmt.Registry) error {

	if swag.IsZero(m.Tenant) { // not required
		return nil
	}

	if m.Tenant != nil {
		if err := m.Tenant.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tenant")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceEvent) validateUser(formats strfmt.Registry) error {

	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceEvent) UnmarshalBinary(b []byte) error {
	var res DeviceEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DeviceEventApp device event app
// swagger:model DeviceEventApp
type DeviceEventApp struct {

	// instance id
	// Format: uuid
	InstanceID strfmt.UUID `json:"instance_id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// version
	Version string `json:"version,omitempty"`
}

// Validate validates this device event app
func (m *DeviceEventApp) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInstanceID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceEventApp) validateInstanceID(formats strfmt.Registry) error {

	if swag.IsZero(m.InstanceID) { // not required
		return nil
	}

	if err := validate.FormatOf("app"+"."+"instance_id", "body", "uuid", m.InstanceID.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceEventApp) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceEventApp) UnmarshalBinary(b []byte) error {
	var res DeviceEventApp
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DeviceEventDate device event date
// swagger:model DeviceEventDate
type DeviceEventDate struct {

	// first open
	// Format: date-time
	FirstOpen strfmt.DateTime `json:"first_open,omitempty"`

	// local
	// Format: date-time
	Local strfmt.DateTime `json:"local,omitempty"`

	// utc
	// Format: date-time
	Utc strfmt.DateTime `json:"utc,omitempty"`
}

// Validate validates this device event date
func (m *DeviceEventDate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFirstOpen(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUtc(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceEventDate) validateFirstOpen(formats strfmt.Registry) error {

	if swag.IsZero(m.FirstOpen) { // not required
		return nil
	}

	if err := validate.FormatOf("date"+"."+"first_open", "body", "date-time", m.FirstOpen.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DeviceEventDate) validateLocal(formats strfmt.Registry) error {

	if swag.IsZero(m.Local) { // not required
		return nil
	}

	if err := validate.FormatOf("date"+"."+"local", "body", "date-time", m.Local.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DeviceEventDate) validateUtc(formats strfmt.Registry) error {

	if swag.IsZero(m.Utc) { // not required
		return nil
	}

	if err := validate.FormatOf("date"+"."+"utc", "body", "date-time", m.Utc.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceEventDate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceEventDate) UnmarshalBinary(b []byte) error {
	var res DeviceEventDate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DeviceEventDevice device event device
// swagger:model DeviceEventDevice
type DeviceEventDevice struct {

	// brand
	Brand string `json:"brand,omitempty"`

	// category
	Category *string `json:"category,omitempty"`

	// hardware model
	HardwareModel string `json:"hardware_model,omitempty"`

	// id
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// os
	Os *DeviceEventDeviceOs `json:"os,omitempty"`
}

// Validate validates this device event device
func (m *DeviceEventDevice) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceEventDevice) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("device"+"."+"id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DeviceEventDevice) validateOs(formats strfmt.Registry) error {

	if swag.IsZero(m.Os) { // not required
		return nil
	}

	if m.Os != nil {
		if err := m.Os.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("device" + "." + "os")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceEventDevice) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceEventDevice) UnmarshalBinary(b []byte) error {
	var res DeviceEventDevice
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DeviceEventDeviceOs device event device os
// swagger:model DeviceEventDeviceOs
type DeviceEventDeviceOs struct {

	// name
	Name string `json:"name,omitempty"`

	// version
	Version string `json:"version,omitempty"`
}

// Validate validates this device event device os
func (m *DeviceEventDeviceOs) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DeviceEventDeviceOs) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceEventDeviceOs) UnmarshalBinary(b []byte) error {
	var res DeviceEventDeviceOs
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DeviceEventGeo device event geo
// swagger:model DeviceEventGeo
type DeviceEventGeo struct {

	// city
	City *string `json:"city,omitempty"`

	// continent
	Continent string `json:"continent,omitempty"`

	// country
	Country string `json:"country,omitempty"`

	// region
	Region *string `json:"region,omitempty"`
}

// Validate validates this device event geo
func (m *DeviceEventGeo) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DeviceEventGeo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceEventGeo) UnmarshalBinary(b []byte) error {
	var res DeviceEventGeo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DeviceEventTenant device event tenant
// swagger:model DeviceEventTenant
type DeviceEventTenant struct {

	// id
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this device event tenant
func (m *DeviceEventTenant) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceEventTenant) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("tenant"+"."+"id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceEventTenant) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceEventTenant) UnmarshalBinary(b []byte) error {
	var res DeviceEventTenant
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DeviceEventUser device event user
// swagger:model DeviceEventUser
type DeviceEventUser struct {

	// id
	ID int64 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this device event user
func (m *DeviceEventUser) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DeviceEventUser) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceEventUser) UnmarshalBinary(b []byte) error {
	var res DeviceEventUser
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
