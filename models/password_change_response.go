// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PasswordChangeResponse password change response
// swagger:model PasswordChangeResponse
type PasswordChangeResponse struct {

	// data
	Data *PasswordChangeResponseData `json:"data,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// success
	Success bool `json:"success,omitempty"`
}

// Validate validates this password change response
func (m *PasswordChangeResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PasswordChangeResponse) validateData(formats strfmt.Registry) error {

	if swag.IsZero(m.Data) { // not required
		return nil
	}

	if m.Data != nil {
		if err := m.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PasswordChangeResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PasswordChangeResponse) UnmarshalBinary(b []byte) error {
	var res PasswordChangeResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PasswordChangeResponseData password change response data
// swagger:model PasswordChangeResponseData
type PasswordChangeResponseData struct {

	// allow password change
	AllowPasswordChange bool `json:"allow_password_change,omitempty"`

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// image
	Image *string `json:"image,omitempty"`

	// last sign in at
	// Format: date-time
	LastSignInAt strfmt.DateTime `json:"last_sign_in_at,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// provider
	Provider string `json:"provider,omitempty"`

	// tenant id
	// Format: uuid
	TenantID strfmt.UUID `json:"tenant_id,omitempty"`

	// tenant name
	TenantName string `json:"tenant_name,omitempty"`

	// uid
	UID string `json:"uid,omitempty"`

	// updated at
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`
}

// Validate validates this password change response data
func (m *PasswordChangeResponseData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastSignInAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenantID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PasswordChangeResponseData) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("data"+"."+"created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PasswordChangeResponseData) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(m.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("data"+"."+"email", "body", "email", m.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PasswordChangeResponseData) validateLastSignInAt(formats strfmt.Registry) error {

	if swag.IsZero(m.LastSignInAt) { // not required
		return nil
	}

	if err := validate.FormatOf("data"+"."+"last_sign_in_at", "body", "date-time", m.LastSignInAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PasswordChangeResponseData) validateTenantID(formats strfmt.Registry) error {

	if swag.IsZero(m.TenantID) { // not required
		return nil
	}

	if err := validate.FormatOf("data"+"."+"tenant_id", "body", "uuid", m.TenantID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PasswordChangeResponseData) validateUpdatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("data"+"."+"updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PasswordChangeResponseData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PasswordChangeResponseData) UnmarshalBinary(b []byte) error {
	var res PasswordChangeResponseData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
