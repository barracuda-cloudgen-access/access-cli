// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// User user
// swagger:model User
type User struct {

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// enabled
	Enabled bool `json:"enabled,omitempty"`

	// enrollment
	Enrollment *UserEnrollment `json:"enrollment,omitempty"`

	// enrollment status
	// Enum: [valid expired]
	EnrollmentStatus string `json:"enrollment_status,omitempty"`

	// groups
	Groups []*UserGroupsItems0 `json:"groups"`

	// id
	ID int64 `json:"id,omitempty"`

	// modifiable
	Modifiable bool `json:"modifiable,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// status
	// Enum: [unenrolled enrolled]
	Status string `json:"status,omitempty"`

	// updated at
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`
}

// Validate validates this user
func (m *User) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnrollment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnrollmentStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *User) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *User) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(m.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("email", "body", "email", m.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *User) validateEnrollment(formats strfmt.Registry) error {

	if swag.IsZero(m.Enrollment) { // not required
		return nil
	}

	if m.Enrollment != nil {
		if err := m.Enrollment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("enrollment")
			}
			return err
		}
	}

	return nil
}

var userTypeEnrollmentStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["valid","expired"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userTypeEnrollmentStatusPropEnum = append(userTypeEnrollmentStatusPropEnum, v)
	}
}

const (

	// UserEnrollmentStatusValid captures enum value "valid"
	UserEnrollmentStatusValid string = "valid"

	// UserEnrollmentStatusExpired captures enum value "expired"
	UserEnrollmentStatusExpired string = "expired"
)

// prop value enum
func (m *User) validateEnrollmentStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, userTypeEnrollmentStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *User) validateEnrollmentStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.EnrollmentStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateEnrollmentStatusEnum("enrollment_status", "body", m.EnrollmentStatus); err != nil {
		return err
	}

	return nil
}

func (m *User) validateGroups(formats strfmt.Registry) error {

	if swag.IsZero(m.Groups) { // not required
		return nil
	}

	for i := 0; i < len(m.Groups); i++ {
		if swag.IsZero(m.Groups[i]) { // not required
			continue
		}

		if m.Groups[i] != nil {
			if err := m.Groups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var userTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["unenrolled","enrolled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userTypeStatusPropEnum = append(userTypeStatusPropEnum, v)
	}
}

const (

	// UserStatusUnenrolled captures enum value "unenrolled"
	UserStatusUnenrolled string = "unenrolled"

	// UserStatusEnrolled captures enum value "enrolled"
	UserStatusEnrolled string = "enrolled"
)

// prop value enum
func (m *User) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, userTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *User) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *User) validateUpdatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *User) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *User) UnmarshalBinary(b []byte) error {
	var res User
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UserEnrollment user enrollment
// swagger:model UserEnrollment
type UserEnrollment struct {

	// count
	Count int64 `json:"count,omitempty"`

	// expiration
	// Format: date-time
	Expiration strfmt.DateTime `json:"expiration,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this user enrollment
func (m *UserEnrollment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExpiration(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserEnrollment) validateExpiration(formats strfmt.Registry) error {

	if swag.IsZero(m.Expiration) { // not required
		return nil
	}

	if err := validate.FormatOf("enrollment"+"."+"expiration", "body", "date-time", m.Expiration.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserEnrollment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserEnrollment) UnmarshalBinary(b []byte) error {
	var res UserEnrollment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UserGroupsItems0 user groups items0
// swagger:model UserGroupsItems0
type UserGroupsItems0 struct {

	// color
	Color string `json:"color,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this user groups items0
func (m *UserGroupsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UserGroupsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserGroupsItems0) UnmarshalBinary(b []byte) error {
	var res UserGroupsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
