swagger: "2.0"
info:
  description: "Fyde Management API docs"
  version: "1.0.0"
  title: "Fyde Enterprise Console"
  termsOfService: "https://www.fyde.com/terms"
  contact:
    email: "hello@fyde.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "enterprise.fyde.com"
basePath: "/api/v1"
tags:
- name: "auth"
  description: "Authentication on management console"
- name: "access_policies"
  description: "Operations on access policies"
  externalDocs:
    description: "Console docs"
    url: "https://fydeinc.github.io/docs/fyde-enterprise-console/add-policy/"
- name: "access_proxies"
  description: "Operations on access proxies"
  externalDocs:
    description: "Console docs"
    url: "https://fydeinc.github.io/docs/fyde-enterprise-console/add-fyde-access-proxy/"
- name: "access_resources"
  description: "Operations on access resources"
  externalDocs:
    description: "Console docs"
    url: "https://fydeinc.github.io/docs/fyde-enterprise-console/add-resource/"
- name: "asset_sources"
  description: "Operations on asset sources"
- name: "device_events"
  description: "Operations on device events"
- name: "devices"
  description: "Operations on devices"
- name: "groups"
  description: "Operations on groups"
  externalDocs:
    description: "Console docs"
    url: "https://fydeinc.github.io/docs/fyde-enterprise-console/add-group/"
- name: "user_directories"
  description: "Operations on user directories"
- name: "users"
  description: "Operations on users"
  externalDocs:
    description: "Console docs"
    url: "https://fydeinc.github.io/docs/fyde-enterprise-console/add-user/"
- name: "tenants"
  description: "Operations on tenants"
schemes:
- "https"
paths:
  /auth/sign_in:
    post:
      tags:
      - "auth"
      summary: "Initiate a management session"
      operationId: "signIn"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Object with management credentials"
        required: true
        schema:
          $ref: "#/definitions/SignInRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/SignInResponse"
        401:
          description: "unauthorized: invalid credentials"
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              errors:
                type: array
                items:
                  type: string
                  example: "Invalid login credentials. Please try again."
  /auth/password:
    put:
      tags:
      - "auth"
      summary: "Change management password"
      operationId: "changePassword"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Object with old and new password"
        required: true
        schema:
          $ref: "#/definitions/PasswordChangeRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/PasswordChangeResponse"
        401:
          description: "unauthorized: invalid credentials or missing authentication headers"
          schema:
            $ref: "#/definitions/GenericUnauthorizedResponse"
    post:
      # TODO this POST auth/password appears to be deprecated, always returns 404
      tags:
      - "auth"
      summary: "Reset management password"
      operationId: "resetPassword"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Object with user email and redirect URL"
        required: true
        schema:
          $ref: "#/definitions/PasswordResetRequest"
securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  SignInRequest:
    type: "object"
    properties:
      email:
        type: "string"
      password:
        type: "string"
  SignInResponse:
    type: object
    properties:
      data:
        type: object
        properties:
          id:
            type: integer
          email:
            type: string
            format: email
          tenant_id:
            type: string
            format: uuid
          provider:
            type: string
            example: email
          name:
            type: string
            example: "John Doe"
          uid:
            type: string
            example: "john.doe@fyde.com"
          allow_password_change:
            type: boolean
          image:
            # TODO is it a string?
            type: string
            nullable: true
          tenant_name:
            type: string
            example: "Fyde"
          last_sign_in_at:
            type: string
            format: date-time
  PasswordChangeRequest:
    type: object
    properties:
      current_password:
        type: string
        example: "123456"
      new_password:
        type: string
        example: "new_passw0rd"
      password_confirmation:
        type: string
        example: "new_passw0rd"
  PasswordChangeResponse:
    type: object
    properties:
      success:
        type: boolean
        example: true
      data:
        type: object
        properties:
          id:
            type: integer
          email:
            type: string
            format: email
          tenant_id:
            type: string
            format: uuid
          provider:
            type: string
            example: email
          name:
            type: string
            example: "John Doe"
          uid:
            type: string
            example: "john.doe@fyde.com"
          allow_password_change:
            type: boolean
          image:
            # TODO is it a string?
            type: string
            nullable: true
          tenant_name:
            type: string
            example: "Fyde"
          last_sign_in_at:
            type: string
            format: date-time
          created_at:
            type: string
            format: date-time
          updated_at:
            type: string
            format: date-time
      message:
        type: string
        example: "Your password has been successfully updated."
  PasswordResetRequest:
    # TODO remove this if POST auth/password is deprecated
    type: object
    properties:
      email:
        type: string
        format: email
      redirect_url:
        type: string
        example: "https://enterprise.fyde.com/auth/password"
  GenericUnauthorizedResponse:
    type: object
    properties:
      success:
        type: boolean
        example: false
      errors:
        type: array
        items:
          type: string
          example: "Unauthorized"
externalDocs:
  description: "Find out more about Fyde"
  url: "https://fydeinc.github.io/docs/"