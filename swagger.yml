swagger: "2.0"
info:
  description: "CloudGen Access Console API docs"
  version: "1.0.0"
  title: "CloudGen Access Console"
  termsOfService: "https://www.barracuda.com/company/legal/prd_trm"
  contact:
    email: "hello@barracuda.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "enterprise.fyde.com"
basePath: "/api/v1"
tags:
- name: "auth"
  description: "Authentication on management console"
- name: "access_policies"
  description: "Operations on access policies"
  externalDocs:
    description: "Console docs"
    url: "https://campus.barracuda.com/product/cloudgenaccess/doc/93201523/add-policy/"
- name: "access_proxies"
  description: "Operations on access proxies"
  externalDocs:
    description: "Console docs"
    url: "https://campus.barracuda.com/product/cloudgenaccess/doc/93201527/add-cloudgen-access-proxy/"
- name: "access_resources"
  description: "Operations on access resources"
  externalDocs:
    description: "Console docs"
    url: "https://campus.barracuda.com/product/cloudgenaccess/doc/93201529/add-resource/"
- name: "asset_sources"
  description: "Operations on asset sources"
- name: "assets"
  description: "Operations on assets"
- name: "device_events"
  description: "Operations on device events"
- name: "devices"
  description: "Operations on devices"
- name: "groups"
  description: "Operations on groups"
  externalDocs:
    description: "Console docs"
    url: "https://campus.barracuda.com/product/cloudgenaccess/doc/93201517/add-group/"
- name: "user_directories"
  description: "Operations on user directories"
- name: "users"
  description: "Operations on users"
  externalDocs:
    description: "Console docs"
    url: "https://campus.barracuda.com/product/cloudgenaccess/doc/93201515/add-user/"
- name: "tenants"
  description: "Operations on tenants"
- name: "admins"
  description: "Operations on admins"
schemes:
- "https"
paths:
  /auth/sign_in:
    post:
      tags:
      - "auth"
      summary: "Initiate a management session"
      operationId: "signIn"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      security: []
      parameters:
      - in: "body"
        name: "body"
        description: "Object with management credentials"
        required: true
        schema:
          $ref: "#/definitions/SignInRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/SignInResponse"
          headers:
            Access-Token:
              type: string
              description: Authentication - Access Token
            Client:
              type: string
              description: Authentication - Client
            Token-Type:
              type: string
              description: Authentication - Token Type (Bearer)
            UID:
              type: string
              description: Authentication - User ID
        401:
          $ref: "#/responses/Unauthorized"
  /auth/validate_token:
    get:
      tags:
        - "auth"
      summary: "Verifies if current session token is still valid"
      operationId: "verifyToken"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      security: []
      parameters:
      - in: query
        name: uid
        type: "string"
        required: true
      - in: query
        name: access-token
        type: "string"
        required: true
      - in: query
        name: client
        type: "string"
        required: true
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/SignInResponse"
        401:
          $ref: "#/responses/Unauthorized"
  /auth/password:
    put:
      tags:
      - "auth"
      summary: "Change management password"
      operationId: "changePassword"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Object with old and new password"
        required: true
        schema:
          $ref: "#/definitions/PasswordChangeRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/PasswordChangeResponse"
        401:
          $ref: "#/responses/Unauthorized"
    post:
      # TODO this POST auth/password appears to be deprecated, always returns 404
      tags:
      - "auth"
      summary: "Reset management password"
      operationId: "resetPassword"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Object with user email and redirect URL"
        required: true
        schema:
          $ref: "#/definitions/PasswordResetRequest"
      responses:
        200:
          description: "successful operation"
  /tenants/{tenant_id}/users:
    get:
      tags:
      - "users"
      summary: "List users"
      operationId: "listUsers"
      produces:
      - "application/json"
      parameters:
      - in: query
        name: "status"
        description: "Restrict status of the returned users"
        required: false
        type: string
        enum: [enabled, disabled]
      - in: query
        name: "enrollment_status"
        description: "Restrict enrollment status of the returned users"
        required: false
        type: string
        enum: [enrolled, unenrolled, pending, expired]
      - in: query
        name: "group_name[]"
        description: "Restrict groups of the returned users"
        required: false
        type: array
        collectionFormat: multi
        items:
          type: string
      - in: query
        name: "group_id[]"
        description: "Restrict groups of the returned users"
        required: false
        type: array
        collectionFormat: multi
        items:
          type: integer
      - $ref: '#/parameters/tenantIdParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/pageParam'
      - $ref: '#/parameters/perPageParam'
      - $ref: '#/parameters/searchParam'
      responses:
        200:
          description: "successful operation"
          headers:
            total:
              description: "Total number of items (for pagination)"
              type: integer
          schema:
            type: array
            items:
              allOf:
              - $ref: "#/definitions/User"
              - type: object
                properties:
                  total_devices:
                    type: integer
                    example: 2
        401:
          $ref: "#/responses/Unauthorized"
        404:
          $ref: "#/responses/NotFound"
    post:
      tags:
        - "users"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      summary: "Create user"
      operationId: "createUser"
      parameters:
      - in: "body"
        name: "user"
        description: "Information about the user to create and whether to send an email invitation"
        required: true
        schema:
          type: object
          properties:
            user:
              type: object
              properties:
                email:
                  type: string
                  format: email
                enabled:
                  type: boolean
                  example: true
                group_ids:
                  type: array
                  items:
                    type: integer
                name:
                  type: string
                  example: "John Doe"
                phone_number:
                  type: string
                send_email_invitation:
                  type: boolean
      - $ref: '#/parameters/tenantIdParam'
      responses:
        201:
          description: "User created"
          schema:
            allOf:
              - $ref: "#/definitions/User"
              - type: object
                properties:
                  devices:
                    # TODO point to device model (probably)
                    type: array
                    items:
                      type: object
        401:
          $ref: "#/responses/Unauthorized"
        404:
          $ref: "#/responses/NotFound"
        422:
          $ref: "#/responses/UnprocessableEntity"
  /tenants/{tenant_id}/users/{id}:
    get:
      tags:
        - "users"
      produces:
      - "application/json"
      summary: "Retrieve information about a user"
      operationId: "getUser"
      parameters:
      - in: path
        name: "id"
        required: true
        type: integer
        description: "The ID of the user to retrieve"
      - $ref: '#/parameters/tenantIdParam'
      responses:
        200:
          description: "User info"
          schema:
            allOf:
              - $ref: "#/definitions/User"
              - type: object
                properties:
                  devices:
                    type: array
                    items:
                      $ref: "#/definitions/DevicePartial"
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
    patch:
      tags:
        - "users"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      summary: "Edit user"
      operationId: "editUser"
      parameters:
      - in: path
        name: "id"
        required: true
        type: integer
        description: "The ID of the user to edit"
      - in: body
        name: "user"
        description: "User information to modify"
        required: true
        schema:
          type: object
          properties:
            user:
              type: object
              required:
                - enabled
              properties:
                email:
                  type: string
                  format: email
                enabled:
                  type: boolean
                  example: true
                group_ids:
                  type: array
                  items:
                    type: integer
                name:
                  type: string
                  example: "John Doe"
                phone_number:
                  type: string
      - $ref: '#/parameters/tenantIdParam'
      responses:
        200:
          description: "User edited"
          schema:
            allOf:
              - $ref: "#/definitions/User"
              - type: object
                properties:
                  devices:
                    type: array
                    items:
                      $ref: "#/definitions/DevicePartial"
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        422:
          $ref: "#/responses/UnprocessableEntity"

    delete:
      tags:
        - "users"
      summary: "Delete user"
      operationId: "deleteUser"
      parameters:
      - in: path
        name: "id"
        required: true
        type: array
        collectionFormat: csv
        items:
          type: integer
        description: "The IDs of the users to delete, comma-separated"
      - $ref: '#/parameters/tenantIdParam'
      responses:
        204:
          description: "User deleted"
        401:
          $ref: "#/responses/Unauthorized"
        404:
          $ref: "#/responses/NotFound"
        422:
          $ref: "#/responses/UnprocessableEntity"
  /tenants/{tenant_id}/users/{id}/enrollment:
    post:
      tags:
        - "users"
      summary: "Generate user enrollment link"
      operationId: "generateEnrollmentLink"
      parameters:
      - in: path
        name: "id"
        required: true
        type: integer
        description: "The ID of the user for which to generate a enrollment link"
      - $ref: '#/parameters/tenantIdParam'
      responses:
        201:
          description: "Enrollment link created"
          schema:
            type: object
            properties:
              count:
                type: integer
              expiration:
                type: string
                format: date-time
              url:
                type: string
                format: url
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
    patch:
      tags:
        - "users"
      summary: "Change number of slots available for user enrollment link"
      operationId: "changeEnrollmentLinkSlots"
      parameters:
      - in: path
        name: "id"
        required: true
        type: integer
        description: "The ID of the user for which to change the number of slots"
      - in: "body"
        name: "request"
        description: "Request body"
        required: true
        schema:
          type: object
          properties:
            user_id:
              type: integer
              description: "The ID of the user for which to change the number of slots"
            enrollment:
              type: object
              properties:
                refcount:
                  type: integer
                  description: "The desired number of slots"
      - $ref: '#/parameters/tenantIdParam'
      responses:
        200:
          description: "Enrollment link changed"
          schema:
            type: object
            properties:
              count:
                type: integer
              expiration:
                type: string
                format: date-time
              url:
                type: string
                format: url
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        422:
          $ref: "#/responses/UnprocessableEntity"
    delete:
      tags:
        - "users"
      summary: "Revoke user enrollment link"
      operationId: "revokeEnrollmentLink"
      parameters:
      - in: path
        name: "id"
        required: true
        type: integer
        description: "The ID of the user for which to revoke the enrollment link"
      - $ref: '#/parameters/tenantIdParam'
      responses:
        204:
          description: "Enrollment link revoked"
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
  /tenants/{tenant_id}/users/{id}/send_enrollment_email:
    post:
      tags:
        - "users"
      produces:
      - "application/json"
      summary: "Send email with enrollment link"
      operationId: "sendEnrollmentEmail"
      parameters:
      - in: path
        name: "id"
        required: true
        type: integer
        description: "The ID of the user for which to send the email"
      - $ref: '#/parameters/tenantIdParam'
      responses:
        204:
          description: "Email sent"
        422:
          $ref: "#/responses/UnprocessableEntity"
  /tenants/{tenant_id}/users/{user_id}/devices/{device_id}:
    delete:
      tags:
        - "devices"
        - "users"
      summary: "Delete device"
      operationId: "deleteDevice"
      parameters:
      - in: path
        name: "user_id"
        required: true
        type: integer
        description: "The ID of the user who owns the device to delete"
      - in: path
        name: "device_id"
        required: true
        type: string
        format: uuid
        description: "The ID of the device to delete"
      - $ref: '#/parameters/tenantIdParam'
      responses:
        204:
          description: "Device deleted"
        401:
          $ref: "#/responses/Unauthorized"
        404:
          $ref: "#/responses/NotFound"
  /tenants/{tenant_id}/groups:
    get:
      tags:
      - "groups"
      summary: "List groups"
      operationId: "listGroups"
      produces:
      - "application/json"
      parameters:
      - $ref: '#/parameters/tenantIdParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/pageParam'
      - $ref: '#/parameters/perPageParam'
      - $ref: '#/parameters/searchParam'
      responses:
        200:
          description: "successful operation"
          headers:
            total:
              description: "Total number of items (for pagination)"
              type: integer
          schema:
            type: array
            items:
              allOf:
              - $ref: "#/definitions/Group"
              - type: object
                properties:
                  total_users:
                    type: object
                    properties:
                      pending:
                        type: integer
                        example: 1
                      unenrolled:
                        type: integer
                        example: 1
                      enrolled:
                        type: integer
                        example: 1
        401:
          $ref: "#/responses/Unauthorized"
        404:
          $ref: "#/responses/NotFound"
    post:
      tags:
        - "groups"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      summary: "Create group"
      operationId: "createGroup"
      parameters:
      - in: "body"
        name: "group"
        description: "Information about the group to create"
        required: true
        schema:
          type: object
          properties:
            group:
              type: object
              properties:
                color:
                  type: string
                description:
                  type: string
                  example: "An example group"
                name:
                  type: string
                  example: "Ninjas"
      - $ref: '#/parameters/tenantIdParam'
      responses:
        201:
          description: "Group created"
          schema:
            allOf:
              - $ref: "#/definitions/Group"
              - type: object
                properties:
                  users:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 23
                        name:
                          type: string
                          example: "John Doe"
        401:
          $ref: "#/responses/Unauthorized"
        404:
          $ref: "#/responses/NotFound"
        422:
          $ref: "#/responses/UnprocessableEntity"
  /tenants/{tenant_id}/groups/{id}:
    get:
      tags:
        - "groups"
      produces:
      - "application/json"
      summary: "Retrieve information about a group"
      operationId: "getGroup"
      parameters:
      - in: path
        name: "id"
        required: true
        type: integer
        description: "The ID of the group to retrieve"
      - $ref: '#/parameters/tenantIdParam'
      responses:
        200:
          description: "Group info"
          schema:
            allOf:
              - $ref: "#/definitions/Group"
              - type: object
                properties:
                  users:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 23
                        name:
                          type: string
                          example: "John Doe"
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
    patch:
      tags:
        - "groups"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      summary: "Edit group"
      operationId: "editGroup"
      parameters:
      - in: path
        name: "id"
        required: true
        type: integer
        description: "The ID of the group to edit"
      - in: body
        name: "group"
        description: "Group information to modify"
        required: true
        schema:
          type: object
          properties:
            group:
              $ref: "#/definitions/Group"
      - $ref: '#/parameters/tenantIdParam'
      responses:
        200:
          description: "Group edited"
          schema:
            allOf:
              - $ref: "#/definitions/Group"
              - type: object
                properties:
                  users:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 23
                        name:
                          type: string
                          example: "John Doe"
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        422:
          $ref: "#/responses/UnprocessableEntity"
    delete:
      tags:
        - "groups"
      summary: "Delete group"
      operationId: "deleteGroup"
      parameters:
      - in: path
        name: "id"
        required: true
        type: array
        collectionFormat: csv
        items:
          type: integer
        description: "The IDs of the groups to delete"
      - $ref: '#/parameters/tenantIdParam'
      responses:
        204:
          description: "Group deleted"
        401:
          $ref: "#/responses/Unauthorized"
        404:
          $ref: "#/responses/NotFound"
  /tenants/{tenant_id}/devices:
    get:
      tags:
      - "devices"
      summary: "List devices"
      operationId: "listDevices"
      produces:
      - "application/json"
      parameters:
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/pageParam'
      - $ref: '#/parameters/perPageParam'
      - $ref: '#/parameters/tenantIdParam'
      responses:
        200:
          description: "successful operation"
          headers:
            total:
              description: "Total number of items (for pagination)"
              type: integer
          schema:
            type: array
            items:
              allOf:
                - $ref: "#/definitions/Device"
                - type: object
                  properties:
                    user:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 23
                        name:
                          type: string
                          example: "John Doe"
        401:
          $ref: "#/responses/Unauthorized"
        404:
          $ref: "#/responses/NotFound"
  /tenants/{tenant_id}/devices/{id}:
    get:
      tags:
        - "devices"
      produces:
      - "application/json"
      summary: "Retrieve information about a device"
      operationId: "getDevice"
      parameters:
      - in: path
        name: "id"
        required: true
        type: string
        format: uuid
        description: "The ID of the device to retrieve"
      - $ref: '#/parameters/tenantIdParam'
      responses:
        200:
          description: "Device info"
          schema:
            allOf:
              - $ref: "#/definitions/Device"
              - type: object
                properties:
                  notes:
                    type: string
                    x-nullable: true
                    example: null
                  enabled:
                    type: boolean
                    example: true
                  last_successful_auth:
                    type: string
                    format: date-time
                    x-nullable: true
                  # User is returned with more properties in this one
                  user:
                    type: object
                    properties:
                      email:
                        type: string
                        format: email
                      phone_number:
                        type: string
                      # we must still include these two because go-swagger is bad at merging allOf
                      id:
                        type: integer
                        example: 23
                      name:
                        type: string
                        example: "John Doe"
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
    patch:
      tags:
        - "devices"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      summary: "Edit device"
      operationId: "editDevice"
      parameters:
      - in: path
        name: "id"
        required: true
        type: string
        format: uuid
        description: "The ID of the device to edit"
      - $ref: '#/parameters/tenantIdParam'
      - in: body
        name: "device"
        description: "Device information to modify"
        required: true
        schema:
          type: object
          properties:
            device:
              type: object
              required:
                - enabled
              properties:
                enabled:
                  type: boolean
                notes:
                  type: string
                  x-nullable: true
                  example: null
      responses:
        200:
          description: "Device edited"
          schema:
            $ref: "#/definitions/DevicePartial"
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        422:
          $ref: "#/responses/UnprocessableEntity"
  /tenants/{tenant_id}/devices/{id}/revoke_auth_attempt:
    delete:
      tags:
        - "devices"
      produces:
      - "application/json"
      summary: "Revoke device authentication"
      operationId: "revokeDevice"
      parameters:
      - in: path
        name: "id"
        required: true
        type: string
        format: uuid
        description: "The ID of the device to revoke"
      - $ref: '#/parameters/tenantIdParam'
      responses:
        200:
          description: "Device revoked"
          schema:
            allOf:
              - $ref: "#/definitions/Device"
              - type: object
                properties:
                  notes:
                    type: string
                    x-nullable: true
                    example: null
                  enabled:
                    type: boolean
                    example: true
                  last_successful_auth:
                    type: string
                    format: date-time
                    x-nullable: true
                  # User is returned with more properties in this one
                  user:
                    type: object
                    properties:
                      email:
                        type: string
                        format: email
                      phone_number:
                        type: string
                      # we must still include these two because go-swagger is bad at merging allOf
                      id:
                        type: integer
                        example: 23
                      name:
                        type: string
                        example: "John Doe"
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        422:
          $ref: "#/responses/UnprocessableEntity"
  /tenants/{tenant_id}/devices/{id}/evaluate_resource:
    post:
      tags:
        - "devices"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      summary: "Evaluate access to a resource for a device"
      operationId: "evaluateResource"
      parameters:
      - in: path
        name: "id"
        required: true
        type: string
        format: uuid
        description: "The ID of the device to use to evaluate the resource"
      - $ref: '#/parameters/tenantIdParam'
      - in: body
        name: "evaluate_resource"
        description: "Resource domain/ip to evaluate"
        required: true
        schema:
          type: object
          required:
            - resource_domain
            - attributes
          properties:
            resource_domain:
              type: string
            attributes:
              type: object
              required:
                - antivirus
                - jailbroken
                - fde
                - firewall
                - screen_lock
              properties:
                antivirus:
                  type: boolean
                jailbroken:
                  type: boolean
                fde:
                  type: boolean
                firewall:
                  type: boolean
                screen_lock:
                  type: boolean
      responses:
        200:
          description: "Resource access evaluation response"
          schema:
            type: object
            properties:
              result:
                type: boolean
              remediations:
                type: array
                items:
                  type: object
              errors:
                type: array
                items:
                  type: object
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
  /tenants/{tenant_id}/access_resources:
    get:
      tags:
      - "access_resources"
      summary: "List resources"
      operationId: "listResources"
      produces:
      - "application/json"
      parameters:
      - in: query
        name: "policy_id[]"
        description: "Restrict policies of the returned resources"
        required: false
        type: array
        collectionFormat: multi
        items:
          type: integer
      - in: query
        name: "proxy_id[]"
        description: "Restrict proxies of the returned resources"
        required: false
        type: array
        collectionFormat: multi
        items:
          type: string
          format: uuid
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/pageParam'
      - $ref: '#/parameters/perPageParam'
      - $ref: '#/parameters/searchParam'
      - $ref: '#/parameters/tenantIdParam'
      responses:
        200:
          description: "successful operation"
          headers:
            total:
              description: "Total number of items (for pagination)"
              type: integer
          schema:
            type: array
            items:
              $ref: "#/definitions/AccessResource"
        401:
          $ref: "#/responses/Unauthorized"
        404:
          $ref: "#/responses/NotFound"
    post:
      tags:
        - "access_resources"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      summary: "Create resource"
      operationId: "createResource"
      parameters:
      - $ref: '#/parameters/tenantIdParam'
      - in: "body"
        name: "resource"
        description: "Information about the resource to create"
        required: true
        schema:
          type: object
          required:
            - access_proxy_id
          properties:
            access_resource:
              type: object
              properties:
                name:
                  type: string
                  example: "Graphite"
                access_policy_ids:
                  type: array
                  items:
                    type: integer
                    example: 42
                access_proxy_id:
                  type: string
                  format: uuid
                public_host:
                  type: string
                  example: "graphite.local"
                internal_host:
                  type: string
                  example: "10.1.1.3"
                port_mappings:
                  type: array
                  items:
                    $ref: "#/definitions/AccessResourcePortMapping"
                wildcard_exceptions:
                  type: array
                  items:
                    type: string
                    example: "mail"
                fixed_last_octet:
                  $ref: '#/definitions/NullableOptionalInt'
                  example: 10
                notes:
                  type: string
                enabled:
                  type: boolean
                  example: true
      responses:
        201:
          description: "Resource created"
          schema:
            $ref: "#/definitions/AccessResource"
        401:
          $ref: "#/responses/Unauthorized"
        404:
          $ref: "#/responses/NotFound"
        422:
          $ref: "#/responses/UnprocessableEntity"
  /tenants/{tenant_id}/access_resources/{id}:
    get:
      tags:
        - "access_resources"
      produces:
      - "application/json"
      summary: "Retrieve information about a resource"
      operationId: "getResource"
      parameters:
      - in: path
        name: "id"
        required: true
        type: string
        format: uuid
        description: "The ID of the resource to retrieve"
      - $ref: '#/parameters/tenantIdParam'
      responses:
        200:
          description: "Resource info"
          schema:
            allOf:
              - $ref: "#/definitions/AccessResource"
              - type: object
                properties:
                  last_access_at:
                    # TODO guessing it's a string
                    type: string
                    x-nullable: true
                    format: date-time
                  access_count:
                    type: object
                    properties:
                      denied:
                        type: integer
                      granted:
                        type: integer
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
    patch:
      tags:
        - "access_resources"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      summary: "Edit resource"
      operationId: "editResource"
      parameters:
      - in: path
        name: "id"
        required: true
        type: string
        format: uuid
        description: "The ID of the resource to edit"
      - $ref: '#/parameters/tenantIdParam'
      - in: body
        name: "resource"
        description: "Resource information to modify"
        required: true
        schema:
          type: object
          properties:
            access_resource:
              allOf:
              - $ref: "#/definitions/AccessResource"
              - type: object
                properties:
                  access_proxy_id:
                    type: string
                    format: uuid
                  access_policy_ids:
                    type: array
                    items:
                      type: integer
      responses:
        200:
          description: "Resource edited"
          schema:
            allOf:
              - $ref: "#/definitions/AccessResource"
              - type: object
                properties:
                  access_proxy_name:
                    type: string
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        422:
          $ref: "#/responses/UnprocessableEntity"
    delete:
      tags:
        - "access_resources"
      summary: "Delete resource"
      operationId: "deleteResource"
      parameters:
      - in: path
        name: "id"
        required: true
        type: array
        collectionFormat: csv
        items:
          type: string
          format: uuid
        description: "The IDs of the resources to delete, comma-separated"
      - $ref: '#/parameters/tenantIdParam'
      responses:
        204:
          description: "Resource deleted"
        401:
          $ref: "#/responses/Unauthorized"
        404:
          $ref: "#/responses/NotFound"
  /tenants/{tenant_id}/access_policies:
    get:
      tags:
      - "access_policies"
      summary: "List policies"
      operationId: "listPolicies"
      produces:
      - "application/json"
      parameters:
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/pageParam'
      - $ref: '#/parameters/perPageParam'
      - $ref: '#/parameters/searchParam'
      - $ref: '#/parameters/tenantIdParam'
      responses:
        200:
          description: "successful operation"
          headers:
            total:
              description: "Total number of items (for pagination)"
              type: integer
          schema:
            type: array
            items:
              allOf:
                - $ref: "#/definitions/AccessPolicy"
                - type: object
                  properties:
                    access_resources_count:
                      type: integer
        401:
          $ref: "#/responses/Unauthorized"
        404:
          $ref: "#/responses/NotFound"
    post:
      tags:
        - "access_policies"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      summary: "Create policy"
      operationId: "createPolicy"
      parameters:
      - $ref: '#/parameters/tenantIdParam'
      - in: "body"
        name: "policy"
        description: "Information about the policy to create"
        required: true
        schema:
          type: object
          properties:
            access_policy:
              type: object
              properties:
                access_resource_ids:
                  type: array
                  items:
                    type: string
                    format: uuid
                conditions:
                  type: object
                  additionalProperties:
                    type: object
                  properties:
                    rbac:
                      type: object
                      required:
                        - enabled
                        - group_ids
                        - user_ids
                      properties:
                        enabled:
                          type: boolean
                        group_ids:
                          type: array
                          items:
                            type: integer
                            example: 4
                        user_ids:
                          type: array
                          items:
                            type: integer
                            example: 3
                name:
                  type: string
                  example: "Block jailbroken"
      responses:
        201:
          description: "Policy created"
          schema:
            allOf:
              - $ref: "#/definitions/AccessPolicy"
              - type: object
                properties:
                  access_resources:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        name:
                          type: string
                        created_at:
                          type: string
                          format: date-time
                        updated_at:
                          type: string
                          format: date-time
                  groups:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 45
                        name:
                          type: string
                          example: "Developers"
                        color:
                          type: string
                          x-nullable: true
        401:
          $ref: "#/responses/Unauthorized"
        404:
          $ref: "#/responses/NotFound"
        422:
          $ref: "#/responses/UnprocessableEntity"
  /tenants/{tenant_id}/access_policies/{id}:
    get:
      tags:
        - "access_policies"
      produces:
      - "application/json"
      summary: "Retrieve information about a policy"
      operationId: "getPolicy"
      parameters:
      - in: path
        name: "id"
        required: true
        type: integer
        description: "The ID of the policy to retrieve"
      - $ref: '#/parameters/tenantIdParam'
      responses:
        200:
          description: "Policy info"
          schema:
            allOf:
              - $ref: "#/definitions/AccessPolicy"
              - type: object
                properties:
                  access_resources:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        name:
                          type: string
                        created_at:
                          type: string
                          format: date-time
                        updated_at:
                          type: string
                          format: date-time
                  groups:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 45
                        name:
                          type: string
                          example: "Developers"
                        color:
                          type: string
                          x-nullable: true
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
    patch:
      tags:
        - "access_policies"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      summary: "Edit policy"
      operationId: "editPolicy"
      parameters:
      - in: path
        name: "id"
        required: true
        type: integer
        description: "The ID of the policy to edit"
      - $ref: '#/parameters/tenantIdParam'
      - in: body
        name: "policy"
        description: "Policy information to modify"
        required: true
        schema:
          type: object
          properties:
            access_policy:
              type: object
              properties:
                access_resource_ids:
                  type: array
                  items:
                    type: string
                    format: uuid
                conditions:
                  type: object
                  additionalProperties:
                    type: object
                  properties:
                    rbac:
                      type: object
                      required:
                        - enabled
                        - group_ids
                        - user_ids
                      properties:
                        enabled:
                          type: boolean
                        group_ids:
                          type: array
                          items:
                            type: integer
                            example: 4
                        user_ids:
                          type: array
                          items:
                            type: integer
                            example: 3
                name:
                  type: string
                  example: "Block jailbroken"
      responses:
        200:
          description: "Policy edited"
          schema:
            allOf:
              - $ref: "#/definitions/AccessPolicy"
              - type: object
                properties:
                  access_resources:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        name:
                          type: string
                        created_at:
                          type: string
                          format: date-time
                        updated_at:
                          type: string
                          format: date-time
                  groups:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 45
                        name:
                          type: string
                          example: "Developers"
                        color:
                          type: string
                          x-nullable: true
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        422:
          $ref: "#/responses/UnprocessableEntity"
    delete:
      tags:
        - "access_policies"
      summary: "Delete policy"
      operationId: "deletePolicy"
      parameters:
      - in: path
        name: "id"
        required: true
        type: array
        collectionFormat: csv
        items:
          type: integer
        description: "The IDs of the policies to delete, comma-separated"
      - $ref: '#/parameters/tenantIdParam'
      responses:
        204:
          description: "Policy deleted"
        401:
          $ref: "#/responses/Unauthorized"
        404:
          $ref: "#/responses/NotFound"
        422:
          $ref: "#/responses/UnprocessableEntity"
  /tenants/{tenant_id}/access_proxies:
    get:
      tags:
      - "access_proxies"
      summary: "List proxies"
      operationId: "listProxies"
      produces:
      - "application/json"
      parameters:
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/pageParam'
      - $ref: '#/parameters/perPageParam'
      - $ref: '#/parameters/tenantIdParam'
      responses:
        200:
          description: "successful operation"
          headers:
            total:
              description: "Total number of items (for pagination)"
              type: integer
          schema:
            type: array
            items:
              allOf:
                - $ref: "#/definitions/AccessProxy"
                - type: object
                  properties:
                    enrollment_count:
                      type: integer
                    access_resources_count:
                      type: integer
        401:
          $ref: "#/responses/Unauthorized"
        404:
          $ref: "#/responses/NotFound"
    post:
      tags:
        - "access_proxies"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      summary: "Create proxy"
      operationId: "createProxy"
      parameters:
      - $ref: '#/parameters/tenantIdParam'
      - in: "body"
        name: "proxy"
        description: "Information about the proxy to create"
        required: true
        schema:
          type: object
          properties:
            name:
              type: string
            host:
              type: string
              example: westproxy.example.com
            location:
              type: string
              example: US-West
            port:
              type: integer
              example: 8009
      responses:
        201:
          description: "Proxy created"
          schema:
            type: object
            properties:
              id:
                type: string
                format: uuid
              name:
                type: string
              location:
                type: string
              host:
                type: string
                example: westproxy.example.com
              port:
                type: integer
                example: 8009
              enrollment_url:
                type: string
                format: url
              status:
                type: string
                enum: [proxy_pending, proxy_enabled]
        401:
          $ref: "#/responses/Unauthorized"
        404:
          $ref: "#/responses/NotFound"
        422:
          $ref: "#/responses/UnprocessableEntity"
  /tenants/{tenant_id}/access_proxies/{id}:
    get:
      tags:
        - "access_proxies"
      produces:
      - "application/json"
      summary: "Retrieve information about a proxy"
      operationId: "getProxy"
      parameters:
      - in: path
        name: "id"
        required: true
        type: string
        format: uuid
        description: "The ID of the proxy to retrieve"
      - $ref: '#/parameters/tenantIdParam'
      responses:
        200:
          description: "Proxy info"
          schema:
            allOf:
              - $ref: "#/definitions/AccessProxy"
              - type: object
                properties:
                  proxy_version:
                    type: string
                    example: "1.1.6"
                  access_resources:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        name:
                          type: string
                        enabled:
                          type: boolean
                        created_at:
                          type: string
                          format: date-time
                        updated_at:
                          type: string
                          format: date-time
        401:
          $ref: "#/responses/Unauthorized"
        404:
          $ref: "#/responses/NotFound"
    patch:
      tags:
        - "access_proxies"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      summary: "Edit proxy"
      operationId: "editProxy"
      parameters:
      - in: path
        name: "id"
        required: true
        type: string
        format: uuid
        description: "The ID of the proxy to edit"
      - $ref: '#/parameters/tenantIdParam'
      - in: body
        name: "proxy"
        description: "Proxy information to modify"
        required: true
        schema:
          type: object
          properties:
            access_proxy:
              allOf:
                - $ref: "#/definitions/AccessProxy"
                - type: object
                  properties:
                    proxy_version:
                      type: string
                      example: "1.1.6"
                    access_resources:
                      type: array
                      items:
                        type: object
                        properties:
                          id:
                            type: string
                            format: uuid
                          name:
                            type: string
                          enabled:
                            type: boolean
                          created_at:
                            type: string
                            format: date-time
                          updated_at:
                            type: string
                            format: date-time
      responses:
        200:
          description: "Proxy edited"
          schema:
            allOf:
            - $ref: "#/definitions/AccessProxy"
            - type: object
            properties:
              proxy_version:
                type: string
                example: "1.1.6"
              access_resources:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                    name:
                      type: string
                    enabled:
                      type: boolean
                    created_at:
                      type: string
                      format: date-time
                    updated_at:
                      type: string
                      format: date-time
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        422:
          $ref: "#/responses/UnprocessableEntity"
    delete:
      tags:
        - "access_proxies"
      summary: "Delete proxy"
      operationId: "deleteProxy"
      parameters:
      - in: path
        name: "id"
        required: true
        type: array
        collectionFormat: csv
        items:
          type: string
          format: uuid
        description: "The IDs of the proxies to delete, comma-separated"
      - $ref: '#/parameters/tenantIdParam'
      responses:
        204:
          description: "Proxy deleted"
        401:
          $ref: "#/responses/Unauthorized"
        404:
          $ref: "#/responses/NotFound"
  /tenants/{tenant_id}/device_events:
    get:
      tags:
      - "device_events"
      summary: "List device events. Always returns 25 items per page."
      operationId: "listDeviceEvents"
      produces:
      - "application/json"
      parameters:
      - in: query
        name: "user_id"
        description: "Restrict the events to return to the specified user ID"
        required: false
        type: integer
      - in: query
        name: "event_name[]"
        description: "Restrict the types of events to return"
        required: false
        type: array
        collectionFormat: multi
        items:
          type: string
      - $ref: '#/parameters/pageParam'
      - $ref: '#/parameters/perPageParam'
      - $ref: '#/parameters/tenantIdParam'
      responses:
        200:
          description: "successful operation"
          headers:
            total:
              description: "Total number of items (for pagination)"
              type: integer
          schema:
            type: array
            items:
              $ref: "#/definitions/DeviceEventListItem"
        401:
          $ref: "#/responses/Unauthorized"
        404:
          $ref: "#/responses/NotFound"
  /tenants/{tenant_id}/device_events/{id}:
    get:
      tags:
        - "device_events"
      produces:
      - "application/json"
      summary: "Retrieve device event details"
      operationId: "getDeviceEvent"
      parameters:
      - in: path
        name: "id"
        required: true
        type: string
        description: "The ID of the event to retrieve"
      - $ref: '#/parameters/tenantIdParam'
      - in: query
        name: "date"
        required: true
        type: string
        format: date-time
        description: "The date of the event to retrieve"
      responses:
        200:
          description: "Event info"
          schema:
            $ref: "#/definitions/DeviceEvent"
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
  /tenants/{tenant_id}/assets:
    get:
      tags:
      - "assets"
      summary: "List assets"
      operationId: "listAssets"
      produces:
      - "application/json"
      parameters:
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/pageParam'
      - $ref: '#/parameters/perPageParam'
      - $ref: '#/parameters/tenantIdParam'
      - in: query
        name: "category"
        description: "Restrict category of the returned assets"
        required: false
        type: string
        enum: [blacklist, whitelist]
      responses:
        200:
          description: "successful operation"
          headers:
            total:
              description: "Total number of items (for pagination)"
              type: integer
          schema:
            type: array
            items:
              $ref: "#/definitions/Asset"
        401:
          $ref: "#/responses/Unauthorized"
        404:
          $ref: "#/responses/NotFound"
    post:
      tags:
        - "assets"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      summary: "Create asset"
      operationId: "createAsset"
      parameters:
      - $ref: '#/parameters/tenantIdParam'
      - in: "body"
        name: "asset"
        description: "Information about the asset to create"
        required: true
        schema:
          type: object
          properties:
            category:
              type: string
              example: "domain"
            asset_source_id:
              type: string
              format: uuid
            name:
              type: string
              example: "example.com"
      responses:
        201:
          description: "Asset created"
          schema:
            $ref: "#/definitions/Asset"
        401:
          $ref: "#/responses/Unauthorized"
        404:
          $ref: "#/responses/NotFound"
        422:
          $ref: "#/responses/UnprocessableEntity"
  /tenants/{tenant_id}/assets/{id}:
    get:
      tags:
        - "assets"
      produces:
      - "application/json"
      summary: "Retrieve information about an asset"
      operationId: "getAsset"
      parameters:
      - in: path
        name: "id"
        required: true
        type: integer
        description: "The ID of the asset to retrieve"
      - $ref: '#/parameters/tenantIdParam'
      responses:
        200:
          description: "Asset info"
          schema:
            $ref: "#/definitions/Asset"
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
    delete:
      tags:
        - "assets"
      summary: "Delete asset"
      operationId: "deleteAsset"
      parameters:
      - in: path
        name: "id"
        required: true
        type: array
        collectionFormat: csv
        items:
          type: integer
        description: "The IDs of the assets to delete, comma-separated"
      - $ref: '#/parameters/tenantIdParam'
      responses:
        204:
          description: "Asset deleted"
        401:
          $ref: "#/responses/Unauthorized"
        404:
          $ref: "#/responses/NotFound"
  /tenants/{tenant_id}/asset_sources:
    get:
      tags:
      - "asset_sources"
      summary: "List asset sources"
      operationId: "listAssetSources"
      produces:
      - "application/json"
      parameters:
      - $ref: '#/parameters/pageParam'
      - $ref: '#/parameters/perPageParam'
      - $ref: '#/parameters/tenantIdParam'
      responses:
        200:
          description: "successful operation"
          headers:
            total:
              description: "Total number of items (for pagination)"
              type: integer
          schema:
            type: array
            items:
              $ref: "#/definitions/AssetSource"
        401:
          $ref: "#/responses/Unauthorized"
        404:
          $ref: "#/responses/NotFound"
  /tenants/{tenant_id}/asset_sources/{id}:
    patch:
      tags:
        - "asset_sources"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      summary: "Enable/disable asset source"
      operationId: "editAssetSource"
      parameters:
      - in: path
        name: "id"
        required: true
        type: string
        format: uuid
        description: "The ID of the asset source to edit"
      - $ref: '#/parameters/tenantIdParam'
      - in: body
        name: "asset_source"
        description: "Asset source information to modify"
        required: true
        schema:
          type: object
          properties:
            asset_source:
              type: object
              required:
                - enabled
              properties:
                enabled:
                  type: boolean
      responses:
        200:
          description: "Asset source edited"
          schema:
            $ref: "#/definitions/AssetSource"
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
  /tenants/{tenant_id}/admins:
    get:
      tags:
      - "admins"
      summary: "List admins"
      operationId: "listAdmins"
      produces:
      - "application/json"
      parameters:
      - in: query
        name: "name"
        description: "Restrict name of the returned admins"
        required: false
        type: string
      - in: query
        name: "email"
        description: "Restrict email of the returned admins"
        required: false
        type: string
      - in: query
        name: "authentication_type"
        description: "Restrict authentication_type of the returned admins"
        required: false
        type: string
        enum: [sso, password]
      - in: query
        name: "authentication_email"
        description: "Restrict authentication_email of the returned admins"
        required: false
        type: string
        format: email
      - in: query
        name: "role_names"
        description: "Restrict role names of the returned admins"
        required: false
        type: string
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/pageParam'
      - $ref: '#/parameters/perPageParam'
      - $ref: '#/parameters/searchParam'
      - $ref: '#/parameters/tenantIdParam'
      responses:
        200:
          description: "successful operation"
          headers:
            total:
              description: "Total number of items (for pagination)"
              type: integer
          schema:
            type: array
            items:
              $ref: "#/definitions/Admin"
        401:
          $ref: "#/responses/Unauthorized"
        404:
          $ref: "#/responses/NotFound"
    post:
      tags:
        - "admins"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      summary: "Create admin"
      operationId: "createAdmin"
      parameters:
      - $ref: '#/parameters/tenantIdParam'
      - in: "body"
        name: "admin"
        description: "Information about the admin to create"
        required: true
        schema:
          type: object
          properties:
            admin:
              type: object
              properties:
                name:
                  type: string
                  example: "John"
                email:
                  type: string
                  format: email
                authentication_type:
                  type: string
                  enum: [sso, password]
                authentication_email:
                  type: string
                  format: email
                role_names:
                  type: array
                  items:
                    type: string
                    example: "admin"
                password:
                  type: string
      responses:
        201:
          description: "Admin created"
          schema:
            $ref: "#/definitions/Admin"
        401:
          $ref: "#/responses/Unauthorized"
        404:
          $ref: "#/responses/NotFound"
        422:
          $ref: "#/responses/UnprocessableEntity"
  /tenants/{tenant_id}/admins/{id}:
    get:
      tags:
        - "admins"
      produces:
      - "application/json"
      summary: "Retrieve information about an admin"
      operationId: "getAdmin"
      parameters:
      - in: path
        name: "id"
        required: true
        type: integer
        description: "The ID of the admin to retrieve"
      - $ref: '#/parameters/tenantIdParam'
      responses:
        200:
          description: "Admin info"
          schema:
            allOf:
              - $ref: "#/definitions/Admin"
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
    patch:
      tags:
        - "admins"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      summary: "Edit admin"
      operationId: "editAdmin"
      parameters:
      - in: path
        name: "id"
        required: true
        type: integer
        description: "The ID of the admin to edit"
      - $ref: '#/parameters/tenantIdParam'
      - in: body
        name: "admin"
        description: "Admin information to modify"
        required: true
        schema:
          type: object
          properties:
            admin:
              type: object
              properties:
                name:
                  type: string
                  example: "John"
                authentication_type:
                  type: string
                  enum: [sso, password]
                authentication_email:
                  type: string
                  format: email
                role_names:
                  type: array
                  items:
                    type: string
                    example: "admin"
                password:
                  type: string
      responses:
        200:
          description: "Admin edited"
          schema:
            allOf:
              - $ref: "#/definitions/Admin"
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        422:
          $ref: "#/responses/UnprocessableEntity"
    delete:
      tags:
        - "admins"
      summary: "Delete admin"
      operationId: "deleteAdmin"
      parameters:
      - in: path
        name: "id"
        required: true
        type: array
        collectionFormat: csv
        items:
          type: integer
        description: "The IDs of the admins to delete, comma-separated"
      - $ref: '#/parameters/tenantIdParam'
      responses:
        204:
          description: "Admin deleted"
        401:
          $ref: "#/responses/Unauthorized"
        404:
          $ref: "#/responses/NotFound"
  /tenants/{tenant_id}/app_configuration:
    get:
      tags:
        - "settings_agent_configuration"
      produces:
      - "application/json"
      summary: "Retrieve agent configuration settings"
      operationId: "settingsAgentConfiguration"
      parameters:
      - $ref: '#/parameters/tenantIdParam'
      responses:
        200:
          description: "Admin info"
          schema:
            $ref: "#/definitions/SettingsAgentConfiguration"
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
    patch:
      tags:
        - "settings_agent_configuration"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      summary: "Edit agent configuration"
      operationId: "editSettingsAgentConfiguration"
      parameters:
      - in: body
        name: "app_configuration"
        description: "Agent configuration modify"
        required: true
        schema:
          type: object
          properties:
            app_configuration:
              $ref: "#/definitions/SettingsAgentConfiguration"
      - $ref: '#/parameters/tenantIdParam'
      responses:
        200:
          description: "Agent configuration edited"
          schema:
            $ref: "#/definitions/SettingsAgentConfiguration"
        400:
          $ref: "#/responses/BadRequest"
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        422:
          $ref: "#/responses/UnprocessableEntity"
  /tenants/{tenant_id}/enrollment_settings:
    get:
      tags:
        - "settings_enrollment"
      produces:
      - "application/json"
      summary: "Retrieve enrollment settings"
      operationId: "settingsEnrollment"
      parameters:
      - $ref: '#/parameters/tenantIdParam'
      responses:
        200:
          description: "Admin info"
          schema:
            $ref: "#/definitions/SettingsEnrollment"
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
    patch:
      tags:
        - "settings_enrollment"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      summary: "Edit enrollment settings"
      operationId: "editSettingsEnrollment"
      parameters:
      - in: body
        name: "enrollment_settings"
        required: true
        schema:
          type: object
          properties:
            enrollment_settings:
              $ref: "#/definitions/SettingsEnrollment"
      - $ref: '#/parameters/tenantIdParam'
      responses:
        200:
          description: "Enrollment settings edited"
          schema:
            $ref: "#/definitions/SettingsEnrollment"
        400:
          $ref: "#/responses/BadRequest"
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        422:
          $ref: "#/responses/UnprocessableEntity"
  /tenants/{tenant_id}/analytics_settings:
    get:
      tags:
        - "settings_analytics"
      produces:
      - "application/json"
      summary: "Retrieve analytics settings"
      operationId: "settingsAnalytics"
      parameters:
      - $ref: '#/parameters/tenantIdParam'
      responses:
        200:
          description: "Admin info"
          schema:
            $ref: "#/definitions/SettingsAnalytics"
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
    patch:
      tags:
        - "settings_analytics"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      summary: "Edit analytics settings"
      operationId: "editSettingsAnalytics"
      parameters:
      - in: body
        name: "analytics_settings"
        description: "Analytics settings modify"
        required: true
        schema:
          type: object
          properties:
            analytics_settings:
              $ref: "#/definitions/SettingsAnalytics"
      - $ref: '#/parameters/tenantIdParam'
      responses:
        200:
          description: "Agent configuration edited"
          schema:
            $ref: "#/definitions/SettingsAnalytics"
        400:
          $ref: "#/responses/BadRequest"
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        422:
          $ref: "#/responses/UnprocessableEntity"
  /tenants/{tenant_id}/user_directories:
    get:
      tags:
        - "user_directories"
      produces:
      - "application/json"
      summary: "Retrieve user directories"
      operationId: "listUserDirectories"
      parameters:
      - $ref: '#/parameters/tenantIdParam'
      - $ref: '#/parameters/pageParam'
      - $ref: '#/parameters/perPageParam'
      responses:
        200:
          description: "successful operation"
          headers:
            total:
              description: "Total number of items (for pagination)"
              type: integer
          schema:
            type: array
            items:
              allOf:
              - $ref: "#/definitions/UserDirectory"
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
    post:
      tags:
        - "user_directories"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      summary: "Create user directory"
      operationId: "createUserDirectory"
      parameters:
      - in: "body"
        name: "user_directory"
        description: "Information about the user_directory to create"
        required: true
        schema:
          type: object
          properties:
            user_directory:
              type: object
              properties:
                directory_type:
                  type: string
                  enum: ['google_apps', 'azure_ad']
                name:
                  type: string
                notes:
                  type: string
                short_code:
                  type: string
      - $ref: '#/parameters/tenantIdParam'
      responses:
        201:
          description: "User directory created"
          schema:
            allOf:
              - $ref: "#/definitions/UserDirectory"
        401:
          $ref: "#/responses/Unauthorized"
        404:
          $ref: "#/responses/NotFound"
        422:
          $ref: "#/responses/UnprocessableEntity"
  /tenants/{tenant_id}/user_directories/{id}:
    get:
      tags:
        - "user_directories"
      produces:
      - "application/json"
      summary: "Retrieve information about a user directory"
      operationId: "getUserDirectory"
      parameters:
      - in: path
        name: "id"
        required: true
        type: integer
        description: "The ID of the user directory to retrieve"
      - $ref: '#/parameters/tenantIdParam'
      responses:
        200:
          description: "User directory info"
          schema:
            allOf:
              - $ref: "#/definitions/UserDirectory"
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
    patch:
      tags:
        - "user_directories"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      summary: "Edit user directory"
      operationId: "editUserDirectory"
      parameters:
      - in: path
        name: "id"
        required: true
        type: integer
        description: "The ID of the user to edit"
      - in: body
        name: "user_directory"
        description: "User directory information to modify"
        required: true
        schema:
          type: object
          properties:
            user_directory:
              $ref: '#/definitions/UserDirectory'
      - $ref: '#/parameters/tenantIdParam'
      responses:
        200:
          description: "User directory edited"
          schema:
            allOf:
              - $ref: "#/definitions/UserDirectory"
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        422:
          $ref: "#/responses/UnprocessableEntity"
    delete:
      tags:
        - "user_directories"
      summary: "Delete user directory"
      operationId: "deleteUserDirectory"
      parameters:
      - in: path
        name: "id"
        required: true
        type: integer
        description: "The ID of the user directories to delete"
      - $ref: '#/parameters/tenantIdParam'
      responses:
        204:
          description: "User directory deleted"
        401:
          $ref: "#/responses/Unauthorized"
        404:
          $ref: "#/responses/NotFound"
        422:
          $ref: "#/responses/UnprocessableEntity"
  /tenants:
    get:
      tags:
      - "tenants"
      summary: "List tenants for current admin"
      operationId: "listTenants"
      produces:
      - "application/json"
      parameters:
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/pageParam'
      - $ref: '#/parameters/perPageParam'
      - $ref: '#/parameters/searchParam'
      responses:
        200:
          description: "successful operation"
          headers:
            total:
              description: "Total number of items (for pagination)"
              type: integer
          schema:
            type: array
            items:
              allOf:
              - $ref: "#/definitions/Tenant"
        401:
          $ref: "#/responses/Unauthorized"
  /tenants/{id}:
    get:
      tags:
        - "tenants"
      produces:
      - "application/json"
      summary: "Retrieve information about a tenant"
      operationId: "getTenant"
      parameters:
      - in: path
        name: "id"
        required: true
        type: string
        format: uuid
        description: "The ID of the tenant to retrieve"
      responses:
        200:
          description: "Tenant info"
          schema:
            $ref: "#/definitions/Tenant"
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"

securityDefinitions:
  uid:
    type: "apiKey"
    name: "uid"
    in: "header"
  accessToken:
    type: "apiKey"
    name: "access-token"
    in: "header"
  client:
    type: "apiKey"
    name: "client"
    in: "header"
security:
  # require all at once
  - uid: []
    accessToken: []
    client: []
parameters:
  tenantIdParam:
    in: path
    name: "tenant_id"
    required: true
    type: string
    format: uuid
    description: "The ID of the tenant"
  sortParam:
    in: query
    name: sort
    description: "Sort results"
    type: string
    enum: ['created_asc', 'created_desc', 'id_asc', 'id_desc', 'name_asc', 'name_desc', 'updated_asc', 'updated_desc']
    required: false
  pageParam:
    in: query
    name: page
    description: "Page number"
    type: integer
    required: false
  perPageParam:
    in: query
    name: per_page
    description: "Number of items to return per page"
    type: integer
    required: false
  searchParam:
    in: query
    name: q
    description: "Full-text search query"
    type: string
    required: false
definitions:
  SignInRequest:
    type: "object"
    properties:
      email:
        type: "string"
      password:
        type: "string"
  SignInResponse:
    type: object
    properties:
      data:
        type: object
        properties:
          id:
            type: integer
          email:
            type: string
            format: email
          url:
            type: string
            example: "https://enterprise.fyde.com/sso/start"
          provider:
            type: string
            example: email
          name:
            type: string
            example: "John Doe"
          uid:
            type: string
            example: "john.doe@acme.com"
          tenant_id:
            type: string
            format: uuid
          tenant_name:
            type: string
            example: "ACME Corp."
            description: "Name of default tenant configured for the admin"
          allow_password_change:
            type: boolean
          image:
            type: string
            x-nullable: true
            example: null
          last_sign_in_at:
            type: string
            format: date-time
  PasswordChangeRequest:
    type: object
    properties:
      current_password:
        type: string
        example: "123456"
      new_password:
        type: string
        example: "new_passw0rd"
      password_confirmation:
        type: string
        example: "new_passw0rd"
  PasswordChangeResponse:
    type: object
    properties:
      success:
        type: boolean
        example: true
      data:
        type: object
        properties:
          id:
            type: integer
            example: 34
          email:
            type: string
            format: email
          provider:
            type: string
            example: email
          name:
            type: string
            example: "John Doe"
          uid:
            type: string
            example: "john.doe@acme.com"
          allow_password_change:
            type: boolean
          image:
            type: string
            x-nullable: true
            example: null
          last_sign_in_at:
            type: string
            format: date-time
          created_at:
            type: string
            format: date-time
          updated_at:
            type: string
            format: date-time
      message:
        type: string
        example: "Your password has been successfully updated."
  PasswordResetRequest:
    # TODO remove this if POST auth/password is deprecated
    type: object
    properties:
      email:
        type: string
        format: email
      redirect_url:
        type: string
        example: "https://enterprise.fyde.com/auth/password"
  User:
    type: object
    properties:
      id:
        type: integer
        example: 23
      name:
        type: string
        example: "John Doe"
      email:
        type: string
        format: email
      enabled:
        type: boolean
        example: true
      modifiable:
        type: boolean
        example: true
      updated_at:
        type: string
        format: date-time
      created_at:
        type: string
        format: date-time
      status:
        type: string
        enum: [pending, unenrolled, enrolled]
        example: unenrolled
      enrollment_status:
        type: string
        enum: [valid, expired]
        example: expired
      enrollment:
        type: object
        properties:
          count:
            type: integer
            example: 4
          expiration:
            type: string
            format: date-time
          url:
            type: string
            format: url
            example: "https://www.fyde.com/enroll?endpoint=https%3A%2F%2Fexample.com&token=7b3710ca-9078-4ca3-9375-0a99392b02cf"
      groups:
        type: array
        items:
          type: object
          properties:
            id:
              type: integer
              example: 1
            name:
              type: string
              example: "All"
            display_name:
              type: string
            color:
              type: string
              example: "#20B8AA"
  Group:
    type: object
    properties:
      id:
        type: integer
        example: 23
      name:
        type: string
        example: "Ninjas"
      display_name:
        type: string
        example: "lcl: Ninjas"
      color:
        type: string
      description:
        type: string
        example: "An example group"
      external_id:
        type: string
        x-nullable: true
        example: null
      updated_at:
        type: string
        format: date-time
      created_at:
        type: string
        format: date-time
      modifiable:
        type: boolean
  Device:
    type: object
    properties:
      id:
        type: string
        format: uuid
      enrollment_id:
        type: string
        format: uuid
      brand:
        type: string
        example: "Apple"
      hardware_model:
        type: string
        example: "iPhone9,3"
      os:
        type: string
        example: "iOS"
      updated_at:
        type: string
        format: date-time
      created_at:
        type: string
        format: date-time
      status:
        type: string
        enum: [pending, require_auth, enrolled]
        example: enrolled
      security_checks:
        type: array
        items:
          type: object
          properties:
            category:
              type: string
              example: device
            status:
              # TODO figure out enum options
              type: string
              example: passed
            subcategory:
              type: string
              example: os_version
            timestamp:
              type: string
              format: date-time
      app_version:
        type: string
        example: "0.12.34567"
      last_report_at:
        type: string
        format: date-time
        x-nullable: true
      os_version:
        type: string
        example: "13.0.0"
      notes:
        type: string
        x-nullable: true
        example: null
  DevicePartial:
    type: object
    properties:
      id:
        type: string
        format: uuid
      enrollment_id:
        type: string
        format: uuid
      brand:
        type: string
        example: "Apple"
      hardware_model:
        type: string
        example: "iPhone9,3"
      os:
        type: string
        example: "iOS"
      updated_at:
        type: string
        format: date-time
      created_at:
        type: string
        format: date-time
      enrolled_at:
        type: string
        format: date-time
      status:
        type: string
        # TODO figure out other possible enum options
        enum: [require_auth, enrolled]
        example: enrolled
      notes:
        type: string
        x-nullable: true
        example: null
      model:
        type: string
        example: "iPhone"
      enabled:
        type: boolean
  AccessResource:
    type: object
    required:
      - notes
    properties:
      id:
        type: string
        format: uuid
      name:
        type: string
        example: Graphite
      enabled:
        type: boolean
      port_mappings:
        type: array
        items:
          $ref: "#/definitions/AccessResourcePortMapping"
      internal_host:
        type: string
        example: "10.0.3.14"
      public_host:
        type: string
        example: "graphite.local"
      notes:
        type: string
      access_policies:
        type: array
        items:
          type: object
          properties:
            id:
              type: integer
              example: 42
            name:
              type: string
              example: "Deny All"
      access_proxy:
        type: object
        properties:
          id:
            type: string
            format: uuid
          name:
            type: string
      wildcard_exceptions:
        type: array
        items:
          type: string
          example: "mail"
      fixed_last_octet:
        $ref: '#/definitions/NullableOptionalInt'
        example: 10
  AccessResourcePortMapping:
    type: object
    properties:
      label:
        type: string
        example: "Example mapping"
      protocol:
        enum: [tcp, udp, both]
      public_ports:
        type: array
        items:
          type: string
          example: "80-100"
      internal_ports:
        type: array
        items:
          type: string
          example: "8080-8100"
  AccessPolicy:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
        example: Allow Everyone
      updated_at:
        type: string
        format: date-time
      created_at:
        type: string
        format: date-time
      conditions:
        type: object
        additionalProperties:
          type: object
        properties:
          rbac:
            type: object
            required:
              - enabled
              - group_ids
              - user_ids
            properties:
              enabled:
                type: boolean
              group_ids:
                type: array
                items:
                  type: integer
                  example: 4
              user_ids:
                type: array
                items:
                  type: integer
                  example: 3
  AccessProxy:
    type: object
    properties:
      id:
        type: string
        format: uuid
      name:
        type: string
        example: US-West Proxy
      location:
        type: string
        example: US-West
      host:
        type: string
        example: westproxy.example.com
      port:
        type: integer
        example: 9008
      status:
        type: string
        enum: [proxy_pending, proxy_enabled, proxy_disabled, proxy_maintenance]
      tenant_id:
        type: string
        format: uuid
      updated_at:
        type: string
        format: date-time
      created_at:
        type: string
        format: date-time
      last_access_at:
        type: string
        format: date-time
        x-nullable: true
      access_count:
        type: object
        properties:
          denied:
            type: integer
          granted:
            type: integer
  DeviceEventListItem:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
        example: tunnel-start
      date:
        type: string
        format: date-time
      params:
        type: object
      app:
        type: object
        properties:
          version:
            type: string
      device:
        type: object
        properties:
          brand:
            type: string
          category:
            type: string
            x-nullable: true
            example: null
          hardware_model:
            type: string
          id:
            type: string
            format: uuid
          enrollment_id:
            type: string
            format: uuid
          os:
            type: object
            properties:
              name:
                type: string
              version:
                type: string
      user:
        type: object
        properties:
          id:
            type: integer
          name:
            type: string
      net:
        type: object
  DeviceEvent:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
        example: tunnel-start
      date:
        type: object
        properties:
          utc:
            type: string
            format: date-time
          local:
            type: string
            format: date-time
          first_open:
            type: string
            format: date-time
      params:
        type: object
      app:
        type: object
        properties:
          instance_id:
            type: string
            format: uuid
          name:
            type: string
          version:
            type: string
      geo:
        type: object
        properties:
          continent:
            type: string
            example: "Europe"
          country:
            type: string
            example: "Portugal"
          region:
            type: string
            x-nullable: true
            example: null
          city:
            type: string
            x-nullable: true
            example: null
      device:
        type: object
        properties:
          brand:
            type: string
          category:
            type: string
            x-nullable: true
            example: null
          hardware_model:
            type: string
          id:
            type: string
            format: uuid
          enrollment_id:
            type: string
            format: uuid
          os:
            type: object
            properties:
              name:
                type: string
              version:
                type: string
      tenant:
        type: object
        properties:
          name:
            type: string
          id:
            type: string
            format: uuid
      user:
        type: object
        properties:
          id:
            type: integer
          name:
            type: string
      net:
        type: object
  Asset:
    type: object
    properties:
      id:
        type: integer
        example: 23
      name:
        type: string
        example: "example.com"
      category:
        type: string
        example: "domain"
      asset_source_id:
        type: string
        format: uuid
      updated_at:
        type: string
        format: date-time
      created_at:
        type: string
        format: date-time
  AssetSource:
    type: object
    properties:
      id:
        type: string
        format: uuid
      tenant_id:
        type: string
        format: uuid
      rule_id:
        type: integer
      name:
        type: string
        example: "whitelist"
      enabled:
        type: boolean
      read_only:
        type: boolean
      read_only_count:
        type: integer
        x-nullable: true
      modified_at:
        type: string
        format: date-time
      updated_at:
        type: string
        format: date-time
      created_at:
        type: string
        format: date-time
      category:
        type: string
        x-nullable: true
      subcategory:
        type: string
        x-nullable: true
      assets_count:
        type: integer
  Admin:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
        example: John
      email:
        type: string
        format: email
      role_names:
        type: array
        items:
          type: string
          example: "admin"
      authentication_type:
        type: string
        enum: [sso, password]
      authentication_email:
        type: string
        format: email
      created_at:
        type: string
        format: date-time
      updated_at:
        type: string
        format: date-time
      last_sign_in_at:
        type: string
        format: date-time

  SettingsAgentConfiguration:
    type: object
    properties:
      certificate_period:
        type: integer
        $ref: '#/definitions/NullableOptionalInt'
        example: 30
      contact_admin_action:
        $ref: '#/definitions/NullableOptionalString'
        example: mailto:support@barracuda.com
      dns_servers:
        type: object
        properties:
          list:
            type: string
            example: 8.8.8.8,4.4.4.4
          protocol:
            enum: [plain,dns_over_tls]
      enrollment_polling_time_in_seconds:
        $ref: '#/definitions/NullableOptionalInt'
        example: 600
      history_screen_disabled:
        $ref: '#/definitions/NullableOptionalBoolean'

  SettingsEnrollment:
    type: object
    properties:
      expiration_days:
        type: integer
        example: 30
      refcount:
        type: integer
        example: 10

  SettingsAnalytics:
    type: object
    properties:
      external_server:
        type: object
        properties:
          disable_ssl:
            type: boolean
          intercept_all_domains:
            type: boolean
          url:
            type: string
            example: events.acme.org/post

  UserDirectory:
    type: object
    properties:
      created_at:
        type: string
        format: date-time
      directory_type:
        type: string
        example: google_apps
      id:
        type: integer
      last_job:
        type: object
        x-nullable: true
        properties:
          errors:
            type: array
            items:
              type: string
          finished_at:
            type: string
            format: date-time
          started_at:
            type: string
            format: date-time
          state:
            type: string
            example: finished
          sync_id:
            type: string
      last_successful_sync_at:
        type: string
        format: date-time
      name:
        type: string
      notes:
        type: string
      short_code:
        type: string
      total_groups:
        type: integer
      total_users:
        type: integer
      updated_at:
        type: string
        format: date-time

  Tenant:
    type: object
    properties:
      id:
        type: string
        format: uuid
      name:
        type: string
        example: John
      created_at:
        type: string
        format: date-time
      updated_at:
        type: string
        format: date-time
      locked_at:
        type: string
        format: date-time

  BadRequestResponse:
    type: object
    properties:
      message:
        type: string

  UnauthorizedResponse:
    type: object
    properties:
      success:
        type: boolean
        example: false
      errors:
        type: array
        items:
          type: string
          example: "Unauthorized"

  UnprocessableEntityResponse:
    type: object
    properties:
      error:
        type: string
    additionalProperties:
      type: object

  NotFoundResponse: {}
  ForbiddenResponse: {}

  NullableOptionalString:
    x-go-type:
      type: NullableOptionalString
      import:
        package: github.com/barracuda-cloudgen-access/access-cli/serial
      hints:
        kind: interface
        nullable: true

  NullableOptionalInt:
    x-go-type:
      type: NullableOptionalInt
      import:
        package: github.com/barracuda-cloudgen-access/access-cli/serial
      hints:
        kind: interface
        nullable: true

  NullableOptionalBoolean:
    x-go-type:
      type: NullableOptionalBoolean
      import:
        package: github.com/barracuda-cloudgen-access/access-cli/serial
      hints:
        kind: interface
        nullable: true

responses:

  BadRequest:
    description: "the request is invalid"
    schema:
      $ref: "#/definitions/BadRequestResponse"


  NotFound:
    description: "the specified item was not found"
    schema:
      $ref: "#/definitions/NotFoundResponse"

  Unauthorized:
    description: "unauthorized: invalid credentials or missing authentication headers"
    schema:
      $ref: "#/definitions/UnauthorizedResponse"

  Forbidden:
    description: "forbidden"
    schema:
      $ref: "#/definitions/ForbiddenResponse"

  UnprocessableEntity:
    description: "unprocessable entity"
    schema:
      $ref: "#/definitions/UnprocessableEntityResponse"
externalDocs:
  description: "Find out more about Barracuda CloudGen Access"
  url: "https://campus.barracuda.com/product/cloudgenaccess/doc/93201218/overview/"
